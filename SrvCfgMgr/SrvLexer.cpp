#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1020] =
    {   0,
        1,    1,    0,    0,    0,    0,  125,  123,    2,    1,
        1,  123,  105,  123,  123,  122,  122,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      109,  109,  124,    1,    1,    1,    0,  117,  105,    0,
      117,  107,  106,  122,    0,    0,  121,    0,  114,   88,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      102,  118,  118,   90,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,   19,   20,  118,  118,  118,
      118,  118,  118,  118,  118,  108,  106,  122,    0,    0,
        0,  113,  119,  112,  112,  118,  118,  118,  118,  118,
       89,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  101,  122,    0,    0,    0,    0,  111,  111,    0,
      112,    0,  112,  118,  118,  118,   68,  118,  118,  118,

      118,  118,  118,  118,  118,   96,  118,  118,  118,   33,
      118,   15,  118,   48,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,    0,  118,  118,  118,  118,
      118,  118,   26,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  103,  118,  118,
      118,  118,  122,    0,  120,    0,    0,    0,  111,    0,
      111,    0,  112,  112,  112,  112,  118,  118,  118,  118,
       95,  118,  118,  118,    4,  118,  118,  118,  118,  118,
      118,  118,  104,  118,  118,    3,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,    0,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,    7,  118,   47,  118,   27,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,    0,    0,    0,
        0,    0,  111,  111,  111,  111,    0,  112,  112,  112,
        0,  112,  118,  118,  118,  118,  118,  118,  118,  118,
      118,   32,  118,  118,  118,  118,  118,   41,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,    0,    0,  118,  118,  118,
       39,  118,  118,  118,  118,   37,  118,  118,  118,   64,
      118,  118,  118,   99,  118,  118,  118,  118,  118,  118,

      118,    0,    0,    0,    0,  111,  111,  111,    0,  111,
        0,    0,  112,  112,  112,  112,  118,  118,   36,  118,
      118,  118,  118,  118,  118,    0,  118,  118,   98,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
        0,    0,  118,  118,  118,  118,  118,   62,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,   24,
      118,  118,  118,  120,    0,    0,    0,    0,    0,  111,
      111,  111,  111,    0,  112,  112,  112,    0,  112,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

        0,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,   49,  118,   58,  118,  118,
      118,  118,   12,   10,   87,  118,   46,    0,    0,  118,
      118,  118,   60,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,    5,  118,  118,  118,   16,    0,
        0,    0,    0,  111,  111,  111,    0,  111,  116,  112,
      112,  112,  112,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,    0,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,   11,   67,    0,    0,  118,  118,  118,

       61,  118,  118,  118,  118,  118,   34,  118,  118,    6,
       97,   43,  118,  118,    0,    0,    0,    0,  115,  111,
      111,  111,  111,  112,  112,  112,    0,  112,  118,  118,
      118,  118,  118,  118,  118,  118,  118,   59,  118,    0,
      118,  118,  118,  118,  118,  118,  118,  118,   40,  118,
      118,   38,  118,  118,  118,   35,   13,  118,    0,    0,
       55,   54,   42,  118,   25,  118,  118,  118,   45,   44,
      118,  118,  120,    0,    0,  111,  111,  111,    0,  111,
      112,  112,  112,  112,  118,   17,  118,   66,  118,  118,
      118,   75,  118,  118,    0,  118,  118,  118,  118,  118,

      118,   78,  118,  118,  118,  118,  118,  118,   14,   57,
       56,  118,  118,  118,  118,  118,   63,    0,    0,    0,
        0,  111,  111,  111,  111,  112,  112,  112,    0,  112,
      118,  118,  100,   77,  118,  118,  118,    0,   86,  118,
      118,  118,   53,  118,   79,   65,  118,  118,  118,    8,
      118,  118,   28,  118,  118,    0,    0,    0,  111,  111,
      111,    0,  111,  112,  112,  112,  112,  118,  118,   76,
      118,  118,    0,  118,  118,   52,  118,  118,  118,  118,
       69,  118,  118,  118,  118,  118,  120,    0,    0,    0,
      111,  111,  111,  111,  112,  112,  112,    0,  112,  118,

      118,  118,  118,    0,  118,  118,  118,  118,  118,  118,
      118,  118,  118,   18,   23,    0,    0,  110,  113,  111,
      111,  111,    0,  111,  112,  112,  112,  112,  118,  118,
      118,   30,    0,    0,  118,  118,  118,   80,  118,  118,
       29,  118,  118,  118,    0,    0,  110,    0,  111,  111,
      111,  111,  111,  112,  112,  112,    0,  112,  118,  118,
      118,    0,    0,   31,  118,  118,   81,  118,  118,  118,
      118,  118,  118,  118,  120,  110,  113,  111,    0,  111,
      111,  111,  111,  112,  112,  112,   70,  118,  118,  118,
      118,    0,    0,  118,  118,  118,  118,  118,  118,   51,

      118,   22,  118,    0,  110,  111,  111,  111,  111,  112,
      112,  112,  118,  118,  118,  118,  118,    0,    0,  118,
      118,   82,   83,   84,   85,    9,   21,    0,  111,  111,
        0,  111,  111,  112,   50,  118,  118,  118,  118,    0,
        0,  118,  118,  120,  111,  111,  112,  118,  118,  118,
      118,    0,    0,    0,  118,  118,  118,    0,  111,  111,
        0,  118,  118,  118,  118,    0,    0,    0,   91,  118,
      118,  118,   91,  110,  111,  111,   71,  118,  118,  118,
        0,   93,    0,  118,   93,  118,  110,  111,  111,    0,
      118,  118,   74,    0,   92,  118,   92,    0,  111,  111,

      118,   72,   94,   94,    0,  111,  111,    0,   73,  120,
      111,  111,    0,  111,  111,    0,  111,  111,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1110] =
    {   0,
        0,    0, 1141, 1138,    0,    0, 1138, 5892, 5892,   73,
       75, 1132,    0, 1129,   72,   72,   34, 1113, 1110,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  356,  372,  399,   67,  357,  180,  209,
     5892, 1120, 5892,  111,  137,  222, 1126, 5892,    0, 1094,
     1090, 5892,    0,  457, 1072,  476, 5892,    0,  502, 5892,
       61,  545,   86,   89,  185,  208,  231,  279,  221,  265,
      288,  559,  342,  283,  285,  388,  377,  389,  339,  395,
      326,  410,  394,  544,  561,  469,  557,  392,  574,  507,
      326,  542,  576,  455,  538,  584,  582,  594,  606,  579,

      593,  611,  612,  629,  618,  596,  613,  614,  636,  627,
      642,  643,  648,  649,  647, 5892,    0,  707, 1071,  726,
     1070,  752,    0,  797,  771,  840,  647,  689,  829,  833,
      693,  832,  838,  717,  836,  856,  842,  837,  839,  873,
      739,  890,  888,  892,  874,  757,  877,  904,  905,  893,
      910,  911,  927,  925,  924,  922,  929,  973,  957,  945,
      967,  935,  978,  956,  976,  966,  974,  965,  981,  980,
     1013,  997, 1010, 1011, 1019, 1021, 1028, 1026, 1029, 1032,
     1030, 1014, 1090,  815, 1055, 1009, 1007, 1137, 1109,  824,
     1182, 1225, 1156, 1268, 1021, 1203, 1018, 1228, 1124, 1220,

     1263, 1257, 1142, 1280, 1258, 1025, 1261, 1264, 1282, 1069,
     1268, 1178, 1309, 1300, 1271, 1314, 1302, 1299, 1307, 1311,
     1339, 1384, 1316, 1334, 1346,  981, 1355, 1317, 1354, 1332,
     1361, 1362, 1185, 1405, 1385, 1370, 1386, 1398, 1373, 1409,
     1407, 1438, 1422, 1420, 1426, 1427, 1434, 1414, 1449, 1445,
     1443, 1442, 1507,  964,  963,  962,  931, 1517, 1528, 1571,
     1547, 1590, 1616, 1635, 1661, 1680,  907, 1550, 1663, 1661,
     1441, 1674, 1682, 1507, 1603, 1676, 1693, 1710, 1678, 1696,
     1695, 1698, 1470, 1711, 1713, 1717, 1727, 1728, 1733, 1738,
     1732, 1740, 1745, 1746, 1757, 1767, 1782, 1614, 1763, 1782,

     1768, 1785, 1786, 1781, 1798, 1797, 1805, 1787, 1814, 1809,
     1802, 1532, 1819, 1792, 1821, 1815, 1832, 1838, 1839, 1850,
     1837, 1853, 1844, 1857, 1885, 1869, 1871,  906,  902,  901,
      900, 1929, 1945, 1964, 1990, 2009, 1973, 2035,  866, 2047,
     2090, 2066, 2026, 1887, 1884, 2084, 1989, 2085, 2092, 2079,
     2086, 2162, 2087, 2091, 2121, 2081, 2132, 1842, 2090, 2148,
     2142, 2144, 2137, 2146, 2153, 2151, 2156, 2161, 2185, 2166,
     2190, 2183, 2196, 2186, 2194, 1938, 1985, 2189, 2198, 2200,
     2089, 2204, 2217, 2227, 2235, 2205, 2251, 2242, 2247, 2234,
     2246, 2239, 2256, 2237, 2267, 2250, 2275, 2271, 2287, 2283,

     2291,  853,  852,  824, 2349, 2360,  778, 2372, 2415, 2391,
     2434, 2460, 2471, 2490, 2516, 2535, 2537, 2288, 2286, 2280,
     2518, 2290, 2413, 2532, 2515, 2301, 2548, 2516, 2351, 2519,
     2402, 2560, 2535, 2567, 2559, 2570, 2588, 2587, 2592, 2583,
     2598, 2607, 2601, 2600, 2619, 2620, 2622, 2631, 2637, 2617,
     2458, 2461, 2655, 2639, 2649, 2653, 2659, 2584, 2669, 2644,
     2647, 2674, 2680, 2691, 2686, 2692, 2696, 2701, 2705, 2683,
     2714, 2710, 2707,  777,  776,  775,  774, 2772, 2783, 2794,
     2813, 2839, 2858, 2822, 2884,  773, 2896, 2939, 2915, 2917,
     2925, 2933, 2838, 2937, 2929, 2956, 2970, 2934, 2936, 2935,

     2709, 2974, 2973, 2984, 2972, 2985, 2711, 2981, 2986, 2992,
     2987, 2990, 3021, 3005, 3023, 2781, 3009, 2826, 3037, 3025,
     3015, 3029, 3024, 3026, 3027, 3038, 3028, 3052, 3032, 3056,
     3061, 3073, 3039, 3079, 3074, 3060, 3084, 3077, 3081, 3097,
     3088, 3091, 3096, 3104, 3085, 3124, 3127, 3118, 3089,  771,
      753,  733, 3185, 3196,  732, 3208, 3251, 3227, 3236, 3296,
     3270, 3341, 3315, 3249, 3329, 3119, 3238, 3339, 3337, 3126,
     3336, 3357, 3358, 3333, 3128, 3360, 3335, 3376, 3377, 3378,
     3390, 3380, 3394, 3382, 3388, 3409, 3401, 3415, 3418, 3423,
     3421, 3393, 3425, 3283, 3407, 3436, 3442, 3437, 3431, 3432,

     3434, 3462, 3459, 3473, 3472, 3477, 3440, 3468, 3470, 3445,
     3474, 3475, 3492, 3497,  731,  730,  729,  728, 3539, 3557,
     3576, 3602, 3621, 3647,  692, 3659, 3702, 3678, 3480, 3688,
     3696, 3693, 3697, 3680, 3601, 3698, 3703, 3495, 3735, 3553,
     3704, 3694, 3733, 3745, 3544, 3749, 3748, 3746, 3555, 3756,
     3763, 3738, 3750, 3779, 3751, 3740, 3744, 3784, 3761, 3758,
     3778, 3783, 3785, 3798, 3787, 3797, 3802, 3807, 3792, 3793,
     3796, 3826,  688,  687,  686, 3868,  685, 3886, 3929, 3905,
     3974, 3948, 4019, 3993, 4014, 3801, 4011, 3803, 3908, 4013,
     3961, 3806, 3825, 4023, 3853, 4010, 4018, 4021, 4022, 4020,

     3865, 3890, 4050, 4060, 4055, 4068, 4070, 4071, 4056, 5892,
     5892, 4072, 4073, 4059, 4074, 4075, 4062,  683,  681,  680,
      673, 4135, 4154, 4180, 4199, 4225,  672, 4237, 4280, 4256,
     4270, 4267, 4065, 4066, 4258, 4275, 4179, 4117, 4122, 4294,
     4274, 4281, 4167, 4310, 4273, 4277, 4322, 4326, 4325, 4313,
     4327, 4329, 4312, 4316, 4354,  603,  571,  570, 4389,  562,
     4414, 4457, 4433, 4502, 4476, 4547, 4521, 4317, 4507, 4318,
     4324, 4536,  570, 4455, 4535, 4319, 4559, 4550, 4541, 4545,
     4323, 4546, 4548, 4565, 4579, 4586,  557,  556,  528,  525,
     4646, 4665, 4691, 4710, 4736,  524, 4748, 4791, 4767, 4599,

     4578, 4580, 4769, 4788, 4780, 4805, 4444, 4690, 4807, 4808,
     4788, 4821, 4582, 4375, 4393,  523,  522,  521,    0, 4879,
      520, 4891, 4934, 4910, 4979, 4953, 5024, 4998, 4793, 4992,
     4678, 4436, 4498, 4593, 4810, 4921, 5015, 4633, 4870, 5013,
     4751, 5029, 5022, 5028,  519,  518,  516,  515,  514, 5089,
     5108, 5134, 5153, 5179,  513, 5191,    0, 5210, 5017, 5023,
     5211, 4809, 4929, 4932, 5133, 5194, 5020, 5218, 5050, 5121,
     5190, 5209, 5212, 5213,  512,  511, 5892,  483,    0, 5276,
      482, 5288, 5307, 5333, 5352,    0, 5025, 5337, 5086, 5215,
     5348, 5028, 5224, 5333, 5350, 5267, 5312, 5361, 5364, 5207,

     5352, 5208, 5367,  481,  480,  479,  478, 5427, 5446, 5472,
      465,    0, 5354, 5406, 5366, 5360, 5353, 5232,    0, 5427,
     5497, 5266, 5275, 5365, 5405, 5426, 5430,  446,  445,  434,
        0, 5497, 5892,    0, 5463, 5493, 5512, 5513, 5496,    0,
     5498, 5537, 5526,  433,  431,  430, 5892, 5523, 5529, 5525,
     5527, 5547, 5508, 5498, 5550, 5548, 5565,  428,  424,  406,
        0, 5541, 5568, 5569, 5545, 5581, 5571, 5571, 5892, 5592,
     5580, 5578, 5575,  395,  356,  355, 5579, 5593, 5585, 5610,
     5582, 5892, 5617, 5614, 5600, 5622,  353,  352,  350,    0,
     5624, 5616, 5620, 5641, 5892, 5645, 5627,  346,  325,  307,

     5631, 5630, 5892, 5632,    0,  305,  276,    0, 5633,  267,
      262,  260,  258,  254,  251,    0,  229,  214, 5892, 5715,
     5719, 5723, 5727, 5731, 5735, 5737,  232, 5739, 5741, 5743,
     5745, 5747, 5749, 5751, 5753, 5755, 5757, 5761, 5763, 5765,
     5767, 5769, 5771, 5773, 5775, 5777, 5779, 5781, 5783, 5785,
     5787, 5789, 5791, 5793, 5795, 5797, 5799, 5801, 5803, 5805,
     5807, 5809, 5811, 5813,  231, 5815, 5817, 5819,  230, 5821,
     5823, 5825,  228,  226, 5827, 5829, 5831,  224, 5835, 5839,
     5841, 5843,  219,  217, 5847, 5851, 5853, 5855, 5857, 5859,
     5861,  214, 5863, 5865, 5867, 5869, 5871,  145, 5873, 5875,

     5877,  131, 5879,  117, 5881, 5883, 5885,   80, 5887
    } ;

static yyconst flex_int16_t yy_def[1110] =
    {   0,
     1019,    1, 1020, 1020, 1021, 1021, 1019, 1019, 1019, 1019,
     1019, 1022, 1023, 1024, 1019, 1019,   16, 1019, 1019, 1019,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1019, 1019, 1019, 1019, 1019, 1019, 1022, 1019, 1023, 1024,
     1019, 1019, 1025, 1019, 1026,   54, 1019, 1027, 1019, 1019,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1019, 1025, 1019, 1028,  118,
     1029, 1019, 1027, 1019,  124,   62,  126,  126,   26,   26,
       26,   26,   26,  126,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1019,  183, 1030, 1031, 1032, 1019,  188, 1019,
     1019, 1019,  191,  126,  194,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1019,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  184,  184, 1031, 1033, 1034, 1019, 1019, 1019,
      259, 1019, 1019,  263, 1019,  265,  194,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1019,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1035, 1019, 1036,
     1037, 1019, 1019,  333, 1019,  335, 1019, 1019, 1019, 1019,
     1019,  340,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1038,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1019, 1019,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26, 1039, 1040, 1041, 1019, 1019, 1019, 1019, 1019,  408,
     1019, 1019, 1019,  413, 1019,  415,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1019,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1019, 1019,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1036, 1019, 1042, 1043, 1019, 1019, 1019,
      480, 1019,  482, 1019, 1019, 1019, 1019, 1019,  487,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

     1019,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1019, 1019,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1044,
     1045, 1046, 1019, 1019, 1019, 1019, 1019,  556, 1019, 1019,
      560, 1019,  562,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1019,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1019, 1019,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1047, 1019, 1048, 1049, 1019, 1019,
      620, 1019,  622, 1019, 1019, 1019, 1019,  626,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1019,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1019, 1019,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1050, 1051, 1052, 1019, 1019, 1019, 1019,  678,
     1019,  681, 1019,  683,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1019,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26, 1019,
     1019,   26,   26,   26,   26,   26,   26, 1053, 1019, 1054,
     1055, 1019,  722, 1019,  724, 1019, 1019, 1019, 1019,  728,
       26,   26,   26,   26,   26,   26,   26, 1019,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1056, 1057, 1058, 1019, 1019,
     1019, 1019,  761, 1019,  764, 1019,  766,   26,   26,   26,
       26,   26, 1019,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1059, 1019, 1060, 1061,
     1019,  791, 1019,  793, 1019, 1019, 1019, 1019,  797,   26,

       26,   26,   26, 1019,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1062, 1063, 1064, 1065, 1019,
     1019, 1019, 1019,  822, 1019,  825, 1019,  827,   26,   26,
       26,   26, 1019, 1019,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1066, 1019, 1067, 1019, 1068, 1019,
      850, 1019,  852, 1019, 1019, 1019, 1069,  856,   26,   26,
       26, 1019, 1019,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1070, 1071, 1019, 1072, 1073, 1019,
     1019, 1019,  882, 1019,  884, 1074,   26,   26,   26,   26,
       26, 1019, 1019,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26, 1075, 1019, 1076, 1077, 1019,  908, 1019,
     1019, 1078,   26,   26,   26,   26,   26, 1019, 1079,   26,
     1080,   26,   26,   26,   26,   26,   26, 1081, 1019, 1082,
     1083, 1019, 1019, 1084,   26,   26,   26,   26,   26, 1085,
     1019, 1086,   26, 1087, 1088, 1089, 1019,   26,   26,   26,
       26, 1019, 1019, 1019,   26,   26,   26, 1090, 1019, 1091,
     1092,   26,   26,   26,   26, 1019, 1019, 1019, 1019,   26,
       26,   26,   26, 1093, 1094, 1095,   26,   26,   26,   26,
     1019, 1019, 1019,   26,   26,   26, 1096, 1019, 1097, 1098,
       26,   26,   26, 1019, 1019,   26,   26, 1099, 1100, 1101,

       26,   26, 1019,   26, 1102, 1019, 1103, 1104,   26, 1019,
     1105, 1106, 1099, 1019, 1107, 1108, 1109, 1019,    0, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019
    } ;

static yyconst flex_int16_t yy_nxt[5968] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
     1019,   61,  853,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  111,   61,   61, 1019,   61,   61,   85,
       61,  127,   88,   44,   45,  128,   61,   80,   58, 1012,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  111,
       61,   61,   61, 1010,   61,   85,   61,  127,   88,   46,
       45,  128,   61,   80,   58,   61,   61, 1000,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  976,  114,   61,  947,
       61,  946,   61,   61,   44,   45,  934,  129,  912,   70,
      907,   81,  886,  849,  123, 1016,  115,   62,   62,   93,
       62,   94,   61,  114,   61,   61,   61,   82,   61,   61,
     1016,   61,   61,  129,   86,   70,   71,   81,   62,   62,
       87,   62,  115,  132,   61,  130,   61,   72,   61,   61,
       73,   61, 1016,   82,   61, 1008,   61,   61,   61, 1019,
       86, 1016,   71, 1008,   62,   62,   87,   62, 1013,  132,
       61,  130,   61,   72,   89,   61,   73, 1008,   90,  133,

       61,   95,   61,   62,   91,  131,   74,   75,   61,   92,
       61,   76,   96,  134,   61,   97,   77,   78,   61,  138,
       89,  139,   61,   79,   90,  133,  990,   95, 1008,   62,
       91,  131,   74,   75,   61,   92,   61,   76,   96,  134,
       61,   97,   77,   78,   61,  138,  990,  139,   61,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61, 1019,
      145,   61,   61,   61,   61,   61,   61,  877,   61,   61,
      143,  990,   61,  961,  998,   61,  990,  961,  137,   98,
      112,   83,   61,   99,  113,   61,  145,   61,   61,   61,
       61,   61,   61,  100,   61,   61,  143,  101,   61,   61,

       61,   61,  102,  103,  137,   98,  112,   83,   61,   99,
      113,   61,  106,  107,  104,  105,  848,  140,  141,  100,
       61,  147,  108,  101,  142,   61,   61,  961,  102,  103,
      109,   61,   61,  144,  155,   61,  146,   61,   61,  110,
      104,  105,   61,  140,  141,  931,   61,  147,  108,  819,
      142,  961,  931,   61,  958,  931,  109,   61,   61,  144,
      155,   61,  146,   61,   61,  110,  879,  790,   61,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  119,   61,
      120,  120,  120,  120,  120,  120,  857,   57,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  152,   61,  931,

      879,  848,  122,  823,  879,  153,  120,  120,  120,  120,
      120,  120,   61,   57,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  152,   61,  125,  125,  125,  125,  125,
      125,  153,  848,  904,  798,  879,  877,  848,   61,  790,
      721,  762,  848,  790,  122,  729,  819,  161,  158,  790,
       61,  125,  125,  125,  125,  125,  125,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  119,  148,  126,  126,
      126,  126,  126,  126,  158,   66,   61,  721,  816,  804,
      159,   61,  135,  679,  149,   61,  154,   61,   61,  150,
      136,  790,  721,  148,  126,  126,  126,  126,  126,  126,

       61,   66,   61,  151,   61,  156,  159,   61,  135,  163,
      149,   61,  154,   61,   61,  150,  136,   61,  160,   61,
      157,  162,  168,  175,  618,   61,   61,   61,   61,  151,
       61,  156,  164,  169,  170,  163,   61,   61,  165,   61,
      166,  167,  174,   61,  160,   61,  157,  162,  168,   61,
      171,   61,  172,   61,   61,   61,   61,   61,  164,  169,
      170,   61,   61,   61,  165,   61,  166,  167,  174,  173,
      177,  176,   61,  178,  195,   61,  171,  179,  172,   61,
       61,   61,   61,   61,  180,   61,   61,   61,  182,  181,
       61,   61,   61,  627,  122,  173,  177,  176,   61,  178,

      195,  721,  618,  179,  122,   61,  557,  721,  618,  718,
      180,   61,   61,  488,  182,  181,   61,   61,   61,  183,
      183,  183,  183,  183,  183,  183,  183,  183,   55,  196,
      184,  184,  184,  184,  184,  184,   61,   57,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  201,  208,  122,
      618,  477,  477,  409,  618,  196,  184,  184,  184,  184,
      184,  184,   61,   57,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  201,  477,  189,  189,  189,  189,  189,
      189, 1019,   61,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  122,  214,  341,  122,  477,  331,  550,  260,

       61,  189,  189,  189,  189,  189,  189,  190,   61,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  192,  214,
      193,  193,  193,  193,  193,  193,   61,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  477,  193,  193,  193,  193,
      193,  193,  194,  194,  194,  194,  194,  194,  194,  194,
      194,   55,  199,  194,  194,  194,  194,  194,  194,  197,
      198,  200,   61,  331,  331,   61,   61,  202,  205,   61,
       61,   61,   61,  203,  204,   61,  206,  192,  199,  194,
      194,  194,  194,  194,  194,  197,  198,  200,   61,   61,

      207,   61,   61,  202,  205,   61,   61,   61,   61,  203,
      204,   61,  206,  209,  210,  213,   61,   61,  215,  211,
       61,  122,  331,  187,  218,   61,  207,  122, 1019,  216,
      217,   61,  212,   61,  222,   61,   61,  219,  220,  209,
      210,  213,   61,   61,  215,  211,   61,   61,   61,  223,
      218,  224,  331,   61,   61,  216,  217,   61,  212,   61,
      221,   61,   61,  219,  220,   61,  228,   61,   61,  233,
       61,  225,   61,   61,   61,  223,  229,  224,   61,   61,
       61,  226,  227,  187,  328, 1019,  221,  235,   61,  237,
      300,   61,  230,   61,   61,  233,   61,  225,   61,   61,

       61,  231,  229,  236,   61,  232,  234,  239,   61,   61,
       61,  238,  240,  235,   61,  237,   61,   61,  230,   61,
      241,   61,  242,   61,   61,   61,   61,  231,  122,  236,
      187,  232,  234,  239,   61,   61,   61,  238,  240,  243,
       61,  244,   61,   61,  246,   61,  241,   61,  247,   61,
       61,  249,  245,   61,   61,  248,   61,   61,  251,  268,
      250,   61,   61,  252,   61,  243,   61,  244,   61,   61,
      246,   61,   61,   61,  247,   61,  187,  249,  245,   61,
       61,  248,   61,   61,  251,  268,  250,   61,   61,  252,
       61,  187,  122,  122,   61,   61,   50,   61,   61,   61,

       51,   61,  253,  253,  253,  253,  253,  253,  253,  253,
      253,   55,   61,  254,  254,  254,  254,  254,  254, 1019,
       57,  261,  261,  261,  261,  261,  261,  261,  261,  261,
       48,  116,   60,  272,   59,   51,   48, 1019,   61,  254,
      254,  254,  254,  254,  254,   42,   57,  258,   42,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  260, 1019,
      261,  261,  261,  261,  261,  261, 1019,   61,  264,  264,
      264,  264,  264,  264,  264,  264,  264, 1019,  276, 1019,
     1019, 1019, 1019, 1019, 1019,   61,  261,  261,  261,  261,
      261,  261,  190,   61,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  192,  276,  264,  264,  264,  264,  264,
      264,   61,  269, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019,   61, 1019, 1019, 1019, 1019, 1019, 1019,   61,  273,
      270,  264,  264,  264,  264,  264,  264,  265,  265,  265,
      265,  265,  265,  265,  265,  265,   61,   61,  266,  266,
      266,  266,  266,  266,   61, 1019,  270, 1019, 1019, 1019,
     1019, 1019, 1019,   61, 1019, 1019, 1019,  278, 1019, 1019,
     1019,   61,   61,  271,  266,  266,  266,  266,  266,  266,
      267,  267,  267,  267,  267,  267,  267,  267,  267,   61,
      274,  267,  267,  267,  267,  267,  267,   61,  275,  271,

       61,   61,  279,  277,   61,  280,   61,   61,  282,  284,
     1019,   61,  285,  281,   61, 1019,  274,  267,  267,  267,
      267,  267,  267,   61,  275,   61,   61,   61,  279,  277,
       61,  280,   61,   61,  282,  288,  283,   61,  285,  281,
       61,  286,   61,   61,  287,   61,  297,  289,  291,   61,
       61,   61,   61,  290,   61,  299, 1019,   61,  303,   61,
       61,  288,  283, 1019,  298, 1019,  305,  286,   61,   61,
      287,   61,  297,  289, 1019,   61,   61,   61,   61,  290,
       61,  301,   61,   61,  303,   61,   61, 1019,  306,   61,
      298,  304,  305, 1019, 1019,  311,  302,   61,   61,  307,

      314,   61, 1019,   61,   61,   61, 1019,  301,   61,  292,
     1019,  310,  293,   61,  306,   61,   61,  304,  294,  295,
      296,  311,  302,   61,   61,  307,  314,   61,   61,   61,
       61,   61,  308,  312,  316,  292,  309,  310,  293,   61,
      313,   61,   61,  323,  294,  295,  296,  315,   61,  319,
       61,  327,   61,   61,   61,   61,  320,   61,  308,  312,
      316,  322,  309,   61,  317,   61,  313,   61,  321,   61,
       61,  325,  324,  315,   61,  319,   61,   61,   61,  318,
      326,   61,  320,   61,   61,   61,   61,  322,   61,   61,
      317,   61,   61, 1019,  321,   61,   61,  325,  324, 1019,

     1019, 1019, 1019,   61, 1019,  318,  326,   61, 1019, 1019,
       61,   61,   61,   61,   61, 1019,  350, 1019,   61,  253,
      253,  253,  253,  253,  253,  253,  253,  253, 1019,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  258,   61,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  260,
       61,  334,  334,  334,  334,  334,  334, 1019, 1019,  334,
      334,  334,  334,  334,  334,  334,  334,  334, 1019, 1019,
     1019, 1019, 1019, 1019, 1019,   61,   61,  334,  334,  334,
      334,  334,  334,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  343,   61,  336,  336,  336,  336,  336,  336,

      337,   61,  262,  262,  262,  262,  262,  262,  262,  262,
      262, 1019,  351, 1019, 1019, 1019, 1019, 1019,  343,   61,
      336,  336,  336,  336,  336,  336,  190, 1019,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  192,  374,  339,
      339,  339,  339,  339,  339, 1019,   61,  339,  339,  339,
      339,  339,  339,  339,  339,  339, 1019,   61, 1019, 1019,
     1019, 1019, 1019, 1019,  374,  339,  339,  339,  339,  339,
      339,  190,   61,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  341,   61,  342,  342,  342,  342,  342,  342,
     1019, 1019,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  344,  345, 1019,   61, 1019,   61,  346,  347,  348,
      342,  342,  342,  342,  342,  342,  349,   61,  352,   61,
      356,   61,  361,  357,  353,   61,  362,  344,  345,  359,
       61,  358,   61,  346,  347,  348,   61,  360,   61,   61,
     1019,   61,  349,   61,  352,   61,  356,   61,  354,  357,
      353,   61,  355,   61,   61,  359,   61,  358,  363,  364,
       61,  365,   61,  360,   61,   61,  367,   61, 1019,  366,
       61,   61,  369,  370,  354,   61,   61,  368,  355,   61,
       61,   61,   61,   61,  363,  364,   61,  365,   61,   61,
      372,  373,  367,  375,  371,  366,   61,   61,  369,  370,

       61,   61,   61,  368, 1019,  378,   61,   61,  376,   61,
       61,   61,  379,  380,   61,   61,  372,  381,  387,  375,
      371,  382, 1019,  377,   61,   61,   61,  385,   61,   61,
       61,  378,   61,  383,  376,   61,   61,   61,  379,  380,
       61,   61,  384,  381,  388,   61,  389,  382,   61,  377,
       61,   61,   61,  385,   61,   61,   61,   61,   61,  383,
      386,   61,   61,  390,   61,  392,   61,   61,  384,  391,
      388,   61,  389,  393,   61,   61,  396,  395,   61,  394,
       61,   61,   61,   61,   61,   61,  386,   61,   61,  390,
       61,  392,  397,   61,  399,  391,   61,  401,  398,  393,

       61,   61,  396,  395, 1019,  394,   61,   61,   61,  400,
      418,   61,   61,   61,   61, 1019, 1019, 1019,  397,   61,
     1019, 1019,   61,  401,  398,  419,   61,   61,   61, 1019,
       61, 1019, 1019, 1019, 1019,  400,  418, 1019,   61,  405,
       61,  332,  332,  332,  332,  332,  332,  332,  332,  332,
     1019,  419, 1019,   61,   61,  258,   61,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  260, 1019,  407,  407,
      407,  407,  407,  407, 1019,  451,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  407,  407,  407,  407,  407,  407,

      258,  451,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  409,  452,  410,  410,  410,  410,  410,  410, 1019,
      421,  410,  410,  410,  410,  410,  410,  410,  410,  410,
     1019, 1019,   61, 1019, 1019,  417, 1019, 1019,  452,  410,
      410,  410,  410,  410,  410,  190,  421,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  192,  190,   61,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  341,   61,
      414,  414,  414,  414,  414,  414, 1019, 1019,  414,  414,
      414,  414,  414,  414,  414,  414,  414, 1019, 1019, 1019,
      432, 1019, 1019, 1019, 1019,   61,  414,  414,  414,  414,

      414,  414,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  420,  422,  416,  416,  416,  416,  416,  416,  423,
      424,  425,   61,  429,   61,  434, 1019,   61,   61,   61,
       61,  430,   61,   61,   61,   61, 1019,  420,  422,  416,
      416,  416,  416,  416,  416,  423,  424,  425,   61,  429,
       61,  434,  431,   61,   61,   61,   61,  430,   61,   61,
       61,   61,  426,  426,   61,  426,  426,  426,  426,  426,
      426,  427,  433,  426,  435,   61,  440,  436,  431,  437,
       61,  438, 1019,  426,  426,   61,  441,   61,  439,   61,
       61,   61, 1019,  442,   61,  443,   61, 1019,  433,   61,

      435,   61,  440,  436,   61,  437,   61,  438,  444,   61,
      445,   61,  441,   61,  439,   61,  446,   61,  447,  442,
       61,  443,   61,  449,  453,   61,   61,  448,   61,   61,
       61,  450,   61,   61,  444,   61,  445,   61,  454,   61,
      455,   61,  446,   61,  447,  456,  457,   61,   61,  449,
      453,  462,   61,  448,   61,   61,  463,  450,   61,   61,
       61,  458,  459,   61,  454,   61,  455,   61, 1019,   61,
       61,  456,  457,   61,   61,  460,  461,   61,   61,  465,
       61,  464,   61,  466, 1019,   61,   61,  458,  459,   61,
       61,  468,  472,   61,   61,  494,   61, 1019,  467,   61,

     1019,  460,  461,   61,   61,  465,   61,  464,   61,  466,
       61,   61,  469,  470,   61,   61,   61,  468,   61,   61,
       61,  471,  473,   61,  467,   61,   61,  495,  493,   61,
       61,   61,  497,   61,   61, 1019,   61, 1019,  469,  470,
       61, 1019, 1019, 1019,   61,  501, 1019,  471,  473,   61,
     1019, 1019,   61,  495,  493,   61,   61,   61,  497,   61,
       61,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      258,  501,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  260,  258, 1019,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  409,   61,  481,  481,  481,  481,  481,

      481, 1019, 1019,  481,  481,  481,  481,  481,  481,  481,
      481,  481, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
       61,  481,  481,  481,  481,  481,  481,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  498,  506,  483,  483,
      483,  483,  483,  483,  484,   61,  411,  411,  411,  411,
      411,  411,  411,  411,  411, 1019,   61, 1019, 1019, 1019,
     1019, 1019,  498,  506,  483,  483,  483,  483,  483,  483,
      190,   61,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  190,   61,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  341,  528,  486,  486,  486,  486,  486,  486,

     1019,  529,  486,  486,  486,  486,  486,  486,  486,  486,
      486, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,  528,
      486,  486,  486,  486,  486,  486,  190,  529,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  488,  500,  489,
      489,  489,  489,  489,  489, 1019,  496,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  505, 1019,   61,   61,
      504,   61,   61,  499,  500,  489,  489,  489,  489,  489,
      489,  490,  496,  502,  491,   61, 1019, 1019,   61,  510,
      492, 1019,  505,  503,   61,   61,  504,   61,   61,  499,
      507,   61,  504, 1019,  511,  512,  508,  490,  509,  502,

      491,   61,   61,   61,   61,  510,  492,  513,  517,  503,
       61,  514, 1019,   61,  515, 1019,  507,   61,  504,  516,
      511,  512,  508, 1019,  509,  518,   61,   61,   61,   61,
       61,   61,  519,  513,  517,   61,   61,  514,  520,   61,
      515,   61,  521,   61,   61,  516,  522,  523, 1019,  524,
       61,  518,   61,   61, 1019,  527,   61,   61,  519,  525,
       61,   61,   61,   61,  520,   61, 1019,   61,  521,   61,
       61,  537,  522,  523,   61,  524,   61,  526,  530, 1019,
       61,  527,   61,  531,  538,  525,   61,   61,   61,   61,
       61,   61,   61,  532,  533,  535,   61,  537,   61,  539,

       61,  534,   61,  526,  530,  536,   61, 1019,   61,  531,
      538,  540,   61,   61,  541, 1019,   61,   61,   61,  532,
      533,  535,   61,   61,   61,  539,   61,  534,   61,   61,
      542,  536,  544,  543,   61,   61,  575,  540,   61,   61,
      541,  546,  545,   61,   61,  547,  581,  549,   61,   61,
       61,  548,   61,   61,   61,   61,  542,   61,  544,  543,
       61,   61,  575, 1019, 1019,   61, 1019,  546,  545, 1019,
       61,  547,  581,  549,   61, 1019,   61,  548, 1019,   61,
       61, 1019,  553,   61,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  258, 1019,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  258, 1019,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  409, 1019,  555,  555,  555,
      555,  555,  555, 1019,   61,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  555,  555,  555,  555,  555,  555,  258,
       61,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      557,  567,  558,  558,  558,  558,  558,  558, 1019,   61,
      558,  558,  558,  558,  558,  558,  558,  558,  558, 1019,
     1019,   61, 1019, 1019, 1019, 1019, 1019,  567,  558,  558,
      558,  558,  558,  558,  190,   61,  412,  412,  412,  412,

      412,  412,  412,  412,  412,  341,  190,   61,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  488, 1019,  561,
      561,  561,  561,  561,  561, 1019, 1019,  561,  561,  561,
      561,  561,  561,  561,  561,  561, 1019, 1019,  569, 1019,
     1019, 1019, 1019, 1019,  564,  561,  561,  561,  561,  561,
      561,  562,  562,  562,  562,  562,  562,  562,  562,  562,
       61,  565,  563,  563,  563,  563,  563,  563,   61,  566,
      564,  568,   61, 1019, 1019,  572,   61,   61,   61,   61,
       61,  574, 1019,  570,  573, 1019,   61,  565,  563,  563,
      563,  563,  563,  563,   61,  566,  577,  568,   61,   61,

      571,  572,   61,   61,   61,   61,   61,  574,  576,  570,
      573,  578,  580,   61,  579,   61,   61,   61,  582,  584,
      583, 1019,  577,  585,   61,   61,  571,   61,   61,   61,
       61,  586,  589,   61,  576,   61,  590,  578,  580,   61,
      579,   61,   61,   61,  582,  584,  583,  587,   61,  585,
       61,  588,   61,   61,   61,   61,   61,  586,  593,   61,
      591,   61,  590,  594,   61,  592,   61,   61,   61,   61,
       61,   61,   61,  587,   61,  596,  597,  588,   61,  595,
       61,   61,   61,  602,  593,  603,  591,  598,  599,  594,
       61,  592,   61,   61,   61,   61,   61,   61,   61,   61,

      600,  596,  597,   61,   61,  595,   61,   61,   61,  601,
      604,  603,  605,  598,  599,  606,   61,   61,  609,  608,
       61, 1019,   61,  607,   61,   61,  600,   61,   61,   61,
       61,   61,   61,  611,   61,  601,  604,  610,  605,   61,
       61,  606,   61,   61,  609,  608,   61,   61,   61,  607,
       61,  612,  631,   61,   61,  613,  614,   61,   61,  611,
       61,   61,   61,  610,  640,   61,   61,   61,  635,   61,
       61, 1019, 1019,   61, 1019, 1019, 1019,  612,  631, 1019,
     1019,  613,  614, 1019, 1019, 1019, 1019,   61,   61, 1019,
      640, 1019, 1019,   61,  635,   61,   61,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  258, 1019,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  409,  258, 1019,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  557,
     1019,  621,  621,  621,  621,  621,  621, 1019, 1019,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  621,  621,  621,
      621,  621,  621,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  629,  632,  623,  623,  623,  623,  623,  623,
     1019,   61,  625,  625,  625,  625,  625,  625,  625,  625,
      625, 1019,   61, 1019, 1019, 1019, 1019, 1019,  629,  632,

      623,  623,  623,  623,  623,  623,  190,   61,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  488,   61,  625,
      625,  625,  625,  625,  625, 1019,   61,  628,  628,  628,
      628,  628,  628,  628,  628,  628, 1019, 1019, 1019, 1019,
     1019, 1019,  639, 1019, 1019,  625,  625,  625,  625,  625,
      625,  190,   61,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  627,  630,  628,  628,  628,  628,  628,  628,
      633,  634,   61,  636, 1019, 1019,   61, 1019,   61,   61,
       61,  642,   61,  641,  637,  638, 1019, 1019, 1019,  630,
      628,  628,  628,  628,  628,  628,  633,  634,   61,  636,

       61,   61,   61,   61,   61,   61,   61,  642,   61,  641,
      637,  638,  643,  646,  644,  645,  647,  648,  651,   61,
       61,   61,  649,   61,  653,   61,   61,   61,  652,   61,
      650,   61,  655,   61,  657, 1019,   61,   61,  643,  646,
      644,  645,  647,  648,   61,   61,   61,   61,  649,   61,
       61,   61,   61,  654,  652,  656,  650,   61,   61,   61,
      657,   61,   61,   61,   61,  658,   61,  659,   61,  660,
       61,  662,  663,  661,   61,   61,   61,   61,   61,  654,
       61,  656,  666,   61,   61, 1019,  665,   61,   61, 1019,
       61,  658,   61,  659,   61,  660,  664,  662,  663,  661,

       61,   61,   61,   61,  669,   61,   61,  667,  668,   61,
      670,   61,  665,   61,   61,   61,   61,   61,   61,  671,
       61,  685,  664,   61,  672, 1019, 1019, 1019,   61, 1019,
      669,   61, 1019,  667,  668,   61,  670,   61,   61,   61,
       61,   61,   61,   61,   61,  671,   61,  685, 1019,   61,
      672,  619,  619,  619,  619,  619,  619,  619,  619,  619,
     1019,   61, 1019, 1019,   61, 1019,   61,  258, 1019,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  557,  695,
      677,  677,  677,  677,  677,  677, 1019,  700,  677,  677,
      677,  677,  677,  677,  677,  677,  677, 1019,   61, 1019,

     1019, 1019, 1019, 1019, 1019,  695,  677,  677,  677,  677,
      677,  677,  258,  700,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  679,   61,  680,  680,  680,  680,  680,
      680, 1019,  691,  680,  680,  680,  680,  680,  680,  680,
      680,  680, 1019, 1019,   61, 1019, 1019, 1019, 1019, 1019,
     1019,  680,  680,  680,  680,  680,  680,  190,  691,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  488,  190,
       61,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      627, 1019,  682,  682,  682,  682,  682,  682, 1019, 1019,
      682,  682,  682,  682,  682,  682,  682,  682,  682, 1019,

     1019, 1019, 1019,  697, 1019, 1019, 1019,  690,  682,  682,
      682,  682,  682,  682,  683,  683,  683,  683,  683,  683,
      683,  683,  683,   61,  692,  684,  684,  684,  684,  684,
      684,   61,  687,  690,  688,  686,   61,   61,  689,   61,
       61,   61,  693, 1019, 1019,  696,   61,   61, 1019,   61,
      692,  684,  684,  684,  684,  684,  684,   61,  687,  698,
      688,  686,   61,   61,  689,   61,   61,   61,  693,  694,
      699,  696,   61,   61,  701,  702,   61,  703,   61,  704,
     1019,   61,  708,   61,  706,  698,  705,   61,   61,   61,
     1019,   61,   61,   61,   61,  694,  699,  710,  711,   61,

      701,  702,   61,  703,   61,  704,   61,   61,  708,   61,
      706,  709,  705,   61,   61,   61,  707,   61,   61,   61,
       61,   61,   61,  710,  711,   61,   61,   61,   61,  712,
       61,  713,   61,  714,  715,   61,   61,  709,  716,   61,
       61,   61,  707, 1019,   61,   61,   61,   61,   61,   61,
       61,  717,   61,   61,   61,  712,   61,  713, 1019,  714,
      715,   61,   61, 1019,  716,   61,   61,   61,  736,   61,
       61,   61,   61, 1019,  744,   61,   61,  717,  258, 1019,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  557,
      738, 1019, 1019, 1019,  736,   61,  258, 1019,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  679,   61,  723,
      723,  723,  723,  723,  723, 1019,  738,  723,  723,  723,
      723,  723,  723,  723,  723,  723, 1019, 1019, 1019, 1019,
     1019, 1019, 1019,   61,   61,  723,  723,  723,  723,  723,
      723,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      733,   61,  725,  725,  725,  725,  725,  725, 1019,   61,
      727,  727,  727,  727,  727,  727,  727,  727,  727, 1019,
     1019, 1019, 1019, 1019, 1019, 1019,  733,   61,  725,  725,
      725,  725,  725,  725,  190, 1019,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  627,  735,  727,  727,  727,

      727,  727,  727, 1019,   61,  730,  730,  730,  730,  730,
      730,  730,  730,  730, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019,  735,  727,  727,  727,  727,  727,  727,  190,
       61,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      729,  731,  730,  730,  730,  730,  730,  730,  732,  734,
      737,  739,  740,   61,   61, 1019,   61,   61,  741,  742,
     1019,   61,  743,   61,   61,   61,   61,  731,  730,  730,
      730,  730,  730,  730,  732,  734,  737,  739,  740,   61,
       61,  747,   61,   61,  741,  742,  745,   61,  743,   61,
       61,   61,   61,   61,  746,  748,  749,  750,   61,   61,

      751,  753,   61,   61,  752,   61,  755,  747,   61,   61,
      754,   61,  745,   61,   61,   61,   61,   61,   61,   61,
      746,  748,  749,  750,   61,   61,  751,  753,   61,   61,
      752,   61,  755, 1019,   61,   61,  754,   61, 1019,   61,
       61,   61,   61,   61,   61,  258, 1019,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  679,  773,  760,  760,
      760,  760,  760,  760, 1019,   61,  760,  760,  760,  760,
      760,  760,  760,  760,  760, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019,  773,  760,  760,  760,  760,  760,  760,
      258,   61,  761,  761,  761,  761,  761,  761,  761,  761,

      761,  762,  772,  763,  763,  763,  763,  763,  763, 1019,
       61,  763,  763,  763,  763,  763,  763,  763,  763,  763,
     1019, 1019,   61, 1019, 1019, 1019, 1019, 1019,  772,  763,
      763,  763,  763,  763,  763,  190,   61,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  627,  190,   61,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  729, 1019,
      765,  765,  765,  765,  765,  765, 1019, 1019,  765,  765,
      765,  765,  765,  765,  765,  765,  765, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019,  770,  765,  765,  765,  765,
      765,  765,  766,  766,  766,  766,  766,  766,  766,  766,

      766,   61,  771,  767,  767,  767,  767,  767,  767,  768,
       61,  770,  769,   61,  775,  776,   61,   61,   61, 1019,
       61,  774,  782, 1019,   61, 1019, 1019,   61,  771,  767,
      767,  767,  767,  767,  767,  768,   61,   61,  769,   61,
      775,  776,   61,   61,   61,  777,   61,  774,  779,  780,
       61,  778,  781,   61,  783,   61,   61,  784,  785,   61,
      800,   61,   61,   61,  802,   61,   61,   61,   61,   61,
       61,  777,   61, 1019,  779,  780, 1019,  778,  781,   61,
      783,   61,   61,  784,  785,   61,  800,   61,   61,  786,
      802,   61,   61,   61,   61,   61,   61,   61,   61,  258,

     1019,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      679, 1019, 1019, 1019, 1019,  786, 1019, 1019,   61, 1019,
     1019, 1019, 1019,   61,  258, 1019,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  762,   61,  792,  792,  792,
      792,  792,  792, 1019,   61,  792,  792,  792,  792,  792,
      792,  792,  792,  792, 1019, 1019, 1019, 1019, 1019, 1019,
     1019,  838,   61,  792,  792,  792,  792,  792,  792,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  805,   61,
      794,  794,  794,  794,  794,  794, 1019,   61,  796,  796,
      796,  796,  796,  796,  796,  796,  796, 1019,   61, 1019,

     1019, 1019, 1019, 1019,  805,   61,  794,  794,  794,  794,
      794,  794,  190,   61,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  729,   61,  796,  796,  796,  796,  796,
      796, 1019,  862,  799,  799,  799,  799,  799,  799,  799,
      799,  799, 1019,  801,  806, 1019, 1019, 1019, 1019, 1019,
       61,  796,  796,  796,  796,  796,  796,  190,  862,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  798,  801,
      799,  799,  799,  799,  799,  799,   61,  803,   61,   61,
      808,  809, 1019,  811,   61,  807,  810,  830,   61,   61,
      812,   61,  813,   61, 1019, 1019,  799,  799,  799,  799,

      799,  799,   61,  803,   61,   61,  808,  809,   61,  811,
       61,  807,  810,  815,   61,   61,  812,   61,  813,   61,
      814,   61,   61,   61,  844,   61,  829,  831,   61,   61,
     1019,  863, 1019, 1019,   61, 1019, 1019, 1019, 1019,  815,
     1019, 1019,   61, 1019, 1019, 1019,  814,   61,   61,   61,
      844,   61,  829,  831, 1019,   61,  258,  863,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  762,   61,  821,
      821,  821,  821,  821,  821, 1019,   61,  821,  821,  821,
      821,  821,  821,  821,  821,  821, 1019,  861, 1019, 1019,
     1019, 1019, 1019, 1019, 1019,  821,  821,  821,  821,  821,

      821,  258,   61,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  823,  839,  824,  824,  824,  824,  824,  824,
     1019,   61,  824,  824,  824,  824,  824,  824,  824,  824,
      824, 1019, 1019,   61, 1019, 1019, 1019, 1019, 1019,  839,
      824,  824,  824,  824,  824,  824,  190,   61,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  729,  190,   61,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  798,
     1019,  826,  826,  826,  826,  826,  826, 1019, 1019,  826,
      826,  826,  826,  826,  826,  826,  826,  826, 1019, 1019,
     1019, 1019, 1019, 1019,   61, 1019,  832,  826,  826,  826,

      826,  826,  826,  827,  827,  827,  827,  827,  827,  827,
      827,  827,   61,  833,  828,  828,  828,  828,  828,  828,
       61,  835,  832,   61, 1019, 1019, 1019, 1019,  842,  834,
      836,   61,  892,  859,  840,  841,   61,  864,   61,  833,
      828,  828,  828,  828,  828,  828,  837,  835,   61,   61,
       61,   61,  843,   61,  842,  834,  836,   61,  892,  859,
      840,  841,   61,  864,   61, 1019, 1019, 1019, 1019, 1019,
     1019, 1019,  837, 1019,   61, 1019,   61,   61,  843,   61,
     1019, 1019, 1019,  867,  868,  869, 1019,  870, 1019,  258,
       61,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      762,  258, 1019,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  823,   61,  851,  851,  851,  851,  851,  851,
     1019, 1019,  851,  851,  851,  851,  851,  851,  851,  851,
      851, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,   61,
      851,  851,  851,  851,  851,  851,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  865,  893,  853,  853,  853,
      853,  853,  853, 1019,   61,  855,  855,  855,  855,  855,
      855,  855,  855,  855, 1019,   61, 1019, 1019, 1019, 1019,
     1019,  865,  893,  853,  853,  853,  853,  853,  853,  190,
       61,  854,  854,  854,  854,  854,  854,  854,  854,  854,

      798,   61,  855,  855,  855,  855,  855,  855, 1019, 1019,
      858,  858,  858,  858,  858,  858,  858,  858,  858, 1019,
      860, 1019, 1019, 1019, 1019, 1019, 1019, 1019,  855,  855,
      855,  855,  855,  855,  190,   61,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  857,  860,  858,  858,  858,
      858,  858,  858,  866,  871,  872,   61,  873,   61,  874,
       61,   61,  888,   61,  887,   61,   61, 1019,   61,  918,
      898,   61,   61,  858,  858,  858,  858,  858,  858,  866,
      871,  872,   61,  873,   61,  874,   61, 1019,  888,   61,
      887,   61,   61,   61,   61,  918, 1019,   61,   61,  258,

     1019,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      823,  914,  881,  881,  881,  881,  881,  881, 1019,   61,
      881,  881,  881,  881,  881,  881,  881,  881,  881,   61,
     1019, 1019, 1019, 1019,  899, 1019, 1019,  914,  881,  881,
      881,  881,  881,  881,  258, 1019,  882,  882,  882,  882,
      882,  882,  882,  882,  882,   61,  894,  883,  883,  883,
      883,  883,  883, 1019,   61,  883,  883,  883,  883,  883,
      883,  883,  883,  883, 1019, 1019,   61, 1019, 1019, 1019,
     1019, 1019,  894,  883,  883,  883,  883,  883,  883,  190,
       61,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      798,  190,   61,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  857, 1019,  885,  885,  885,  885,  885,  885,
     1019,  895,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  900,  896,   61,  889,  897,  901,   61,  915,  902,
      885,  885,  885,  885,  885,  885,  890,  895,  903,  919,
       61,   61,   61,  891,   61,   61,   61,  900,   61,   61,
      889,   61,  901,   61,  915,  902, 1019, 1019, 1019, 1019,
     1019, 1019,  890,  940,  903,  919,   61,   61,   61,  891,
       61,   61,   61,  922,   61, 1019,  258,   61,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  823,  258,  940,

      908,  908,  908,  908,  908,  908,  908,  908,  908,   61,
       61,  909,  909,  909,  909,  909,  909, 1019,   61,  909,
      909,  909,  909,  909,  909,  909,  909,  909, 1019, 1019,
      923, 1019, 1019, 1019, 1019,   61,   61,  909,  909,  909,
      909,  909,  909,  190,   61,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  857,   61,  911,  911,  911,  911,
      911,  911, 1019,  913,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  916,  920,  921,   61,  924,  925,  917,
       61,   61,  911,  911,  911,  911,  911,  911,  939,  913,
      935,   61,  926,   61,  927,   61,   61,   61,  938,  916,

      920,  921,   61,   61,   61,  917,   61,   61,   61,   61,
       61, 1019,  937, 1019,  939, 1019,  935,   61,  926,   61,
      927,   61,   61,   61,  938, 1019, 1019, 1019, 1019,   61,
       61,  936, 1019,   61,   61,   61,   61,  258,  937,  932,
      932,  932,  932,  932,  932,  932,  932,  932,   61,   61,
      933,  933,  933,  933,  933,  933, 1019,  936,  933,  933,
      933,  933,  933,  933,  933,  933,  933, 1019,  942,   61,
       61, 1019, 1019,   61,   61,   61,  933,  933,  933,  933,
      933,  933,  190, 1019,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  857,  942,   61,   61,  941,  941,   61,

      941,  941,  941,  941,  941,  941,   61,  258,  941,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  941,  941,
      948,  949,  950,  951,  953,  954, 1019, 1019, 1019, 1019,
     1019,  968,   61, 1019,  969, 1019,   61,  952,  952,   61,
      952,  952,  952,  952,  952,  952,  948, 1019,  952,  951,
      953,  954,  956,  957,  963,   61,   61,  968,  952,  952,
      969,  962,   61,  964,  965,   61,   61, 1019,   61,   61,
       61,  972,   61,  966,  967, 1019,  970,  971,  956,  957,
      963,   61,   61,  977,   61, 1019, 1019,  962,  980,  964,
      965,   61,   61,   61,   61,   61,   61,  972,   61,  966,

      967,  973,  970,  971,  981,  978,  979,  982,   61,  977,
       61,   61,   61,  983,  980,  984,  985,   61,   61,   61,
      986,   61,   61,   61,  994,  992, 1019,  973,   61,  991,
      981,  978,  979,  982,   61,   61,   61,   61,   61,  983,
      995,  984,  985,   61,   61,  997,  986,   61,   61,   61,
      994,  992,  993,   61,   61,  991,  996,   61, 1002,   61,
     1001,   61,   61,   61, 1003,   61,  995,   61, 1004,   61,
       61,  997, 1009,   61,   61,   61,   61, 1019,  993,   61,
     1019, 1019,  996,   61, 1002,   61, 1001, 1019,   61,   61,
     1003,   61, 1019,   61, 1004, 1019,   61, 1019, 1009,   61,

       61,   61,   61, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019,   61,   41,   41,   41,   41,   43,
       43,   43,   43,   47,   47,   47,   47,   49, 1019,   49,
       49,   50,   50,   50,   50,  117, 1019,  117,  117,  121,
      121,  185,  185,  186,  186,  255,  255,  256,  256,  257,
      257,  329,  329,  330,  330,  402,  402,  403,  403,  404,
      404,  428, 1019,  428,  428,  474,  474,  475,  475,  476,
      476,  551,  551,  552,  552,  615,  615,  616,  616,  617,
      617,  673,  673,  674,  674,  675,  675,  551,  551,  719,
      719,  720,  720,  756,  756,  757,  757,  758,  758,  787,

      787,  788,  788,  789,  789,  674,  674,  817,  817,  818,
      818,  845,  845,  846,  846,  847,  847,  875,  875,  876,
      876,  878,  878,  757,  757,  905,  905,  906,  906,  928,
      928,  929,  929,  930,  930,  941, 1019,  941,  941,  943,
     1019,  943,  943,  944,  944,  945,  945,  952, 1019,  952,
      952,  955, 1019,  955,  955,  817,  817,  959,  959,  960,
      960,  974,  974,  975,  975,  987,  987,  988,  988,  989,
      989,  876,  876,  999,  999, 1005, 1005, 1006, 1006, 1007,
     1007, 1011, 1011, 1014, 1014, 1015, 1015, 1017, 1017, 1018,
     1018,    7, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019
    } ;

static yyconst flex_int16_t yy_chk[5968] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1108,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1104,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1102,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1098,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1092,   39,   32, 1084,
       21, 1083,   21,   39,   46,   46, 1078,   65, 1074,   21,
     1073,   25, 1069, 1065, 1027, 1018,   40,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
     1017,   66,   40,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   40,   69,   69,   67,   29,   22,   25,   22,
       22,   25, 1015,   25,   67, 1014,   22,   66,   40, 1013,
       29, 1012,   22, 1011,   22,   22,   29,   22, 1010,   69,
       69,   67,   29,   22,   31,   22,   22, 1007,   31,   70,

       67,   33,   22,   23,   31,   68,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   75,   68,   23,   31,   70, 1006,   33, 1000,   23,
       31,   68,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  999,   75,   68,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       81,   26,   26,   26,   26,   26,   26,  998,   26,   91,
       79,  989,   26,  988,  987,   26,  976,  975,   73,   34,
       38,   26,   79,   34,   38,   73,   81,   26,   26,   26,
       26,   26,   26,   34,   26,   91,   79,   35,   26,   34,

       38,   26,   35,   35,   73,   34,   38,   26,   79,   34,
       38,   73,   36,   36,   35,   35,  974,   76,   77,   34,
       77,   83,   36,   35,   78,   34,   38,  960,   35,   35,
       36,   76,   78,   80,   88,   88,   82,   83,   80,   36,
       35,   35,   36,   76,   77,  959,   77,   83,   36,  958,
       78,  946,  945,   82,  944,  930,   36,   76,   78,   80,
       88,   88,   82,   83,   80,   36,  929,  928,   36,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   82,
       54,   54,   54,   54,   54,   54,  911,   54,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   86,   94,  907,

      906,  905,  904,  881,  878,   86,   54,   54,   54,   54,
       54,   54,   86,   54,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   86,   94,   59,   59,   59,   59,   59,
       59,   86,  876,  875,  855,  849,  848,  847,   86,  846,
      845,  821,  818,  817,  816,  796,  790,   95,   90,  789,
       90,   59,   59,   59,   59,   59,   59,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   84,   62,   62,
       62,   62,   62,   62,   90,   62,   90,  788,  787,  773,
       92,   95,   72,  760,   85,   92,   87,   84,   62,   85,
       72,  758,  757,   84,   62,   62,   62,   62,   62,   62,

       87,   62,   72,   85,   85,   89,   92,   95,   72,   97,
       85,   92,   87,   84,   62,   85,   72,   89,   93,   93,
       89,   96,  100,  108,  756,   97,   87,   96,   72,   85,
       85,   89,   98,  101,  102,   97,  101,   98,   99,  106,
       99,   99,  105,   89,   93,   93,   89,   96,  100,   99,
      103,   97,  104,   96,  102,  103,  107,  108,   98,  101,
      102,  105,  101,   98,   99,  106,   99,   99,  105,  104,
      110,  109,  104,  111,  127,   99,  103,  112,  104,  109,
      102,  103,  107,  108,  113,  111,  112,  105,  115,  114,
      115,  113,  114,  727,  721,  104,  110,  109,  104,  111,

      127,  720,  719,  112,  718,  109,  677,  675,  674,  673,
      113,  111,  112,  625,  115,  114,  115,  113,  114,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  128,
      118,  118,  118,  118,  118,  118,  131,  118,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  134,  141,  618,
      617,  616,  615,  555,  552,  128,  118,  118,  118,  118,
      118,  118,  131,  118,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  134,  551,  122,  122,  122,  122,  122,
      122,  125,  141,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  550,  146,  486,  477,  476,  475,  474,  407,

      146,  122,  122,  122,  122,  122,  122,  124,  141,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  146,
      124,  124,  124,  124,  124,  124,  146,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  404,  124,  124,  124,  124,
      124,  124,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  132,  126,  126,  126,  126,  126,  126,  129,
      130,  133,  129,  403,  402,  132,  130,  135,  138,  135,
      138,  133,  139,  136,  137,  137,  139,  339,  132,  126,
      126,  126,  126,  126,  126,  129,  130,  133,  129,  136,

      140,  132,  130,  135,  138,  135,  138,  133,  139,  136,
      137,  137,  139,  142,  143,  145,  140,  145,  147,  144,
      147,  331,  330,  329,  150,  136,  140,  328,  267,  148,
      149,  143,  144,  142,  154,  144,  150,  151,  152,  142,
      143,  145,  140,  145,  147,  144,  147,  148,  149,  155,
      150,  156,  257,  151,  152,  148,  149,  143,  144,  142,
      153,  144,  150,  151,  152,  156,  159,  155,  154,  162,
      153,  157,  157,  148,  149,  155,  160,  156,  162,  151,
      152,  158,  158,  256,  255,  254,  153,  164,  160,  166,
      226,  156,  161,  155,  154,  162,  153,  157,  157,  164,

      159,  161,  160,  165,  162,  161,  163,  168,  168,  166,
      161,  167,  169,  164,  160,  166,  158,  167,  161,  165,
      170,  163,  171,  170,  169,  164,  159,  161,  187,  165,
      186,  161,  163,  168,  168,  166,  161,  167,  169,  172,
      172,  173,  158,  167,  175,  165,  170,  163,  176,  170,
      169,  178,  174,  173,  174,  177,  171,  182,  180,  195,
      179,  197,  175,  181,  176,  172,  172,  173,  206,  178,
      175,  177,  179,  181,  176,  180,  185,  178,  174,  173,
      174,  177,  171,  182,  180,  195,  179,  197,  175,  181,
      176,  121,  119,   55,  206,  178,   51,  177,  179,  181,

       50,  180,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  210,  183,  183,  183,  183,  183,  183,  189,
      183,  189,  189,  189,  189,  189,  189,  189,  189,  189,
       47,   42,   19,  199,   18,   14,   12,    7,  210,  183,
      183,  183,  183,  183,  183,    4,  183,  188,    3,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,    0,
      188,  188,  188,  188,  188,  188,  193,  199,  193,  193,
      193,  193,  193,  193,  193,  193,  193,    0,  203,    0,
        0,    0,    0,    0,    0,  203,  188,  188,  188,  188,
      188,  188,  191,  199,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  203,  191,  191,  191,  191,  191,
      191,  203,  196,    0,    0,    0,    0,    0,    0,    0,
        0,  212,    0,    0,    0,    0,    0,    0,  233,  200,
      196,  191,  191,  191,  191,  191,  191,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  196,  212,  192,  192,
      192,  192,  192,  192,  233,    0,  196,    0,    0,    0,
        0,    0,    0,  200,    0,    0,    0,  205,    0,    0,
        0,  198,  196,  198,  192,  192,  192,  192,  192,  192,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  200,
      201,  194,  194,  194,  194,  194,  194,  198,  202,  198,

      202,  205,  207,  204,  207,  208,  201,  208,  211,  214,
        0,  211,  215,  209,  215,    0,  201,  194,  194,  194,
      194,  194,  194,  204,  202,  209,  202,  205,  207,  204,
      207,  208,  201,  208,  211,  218,  213,  211,  215,  209,
      215,  216,  218,  214,  217,  217,  223,  219,  221,  204,
      219,  209,  213,  220,  220,  225,    0,  216,  228,  223,
      228,  218,  213,    0,  224,    0,  230,  216,  218,  214,
      217,  217,  223,  219,    0,  230,  219,  224,  213,  220,
      220,  227,  221,  216,  228,  223,  228,    0,  231,  225,
      224,  229,  230,    0,    0,  236,  227,  229,  227,  232,

      239,  230,    0,  224,  231,  232,    0,  227,  221,  222,
        0,  235,  222,  236,  231,  225,  239,  229,  222,  222,
      222,  236,  227,  229,  227,  232,  239,  222,  235,  237,
      231,  232,  234,  237,  241,  222,  234,  235,  222,  236,
      238,  238,  239,  247,  222,  222,  222,  240,  234,  243,
      241,  252,  240,  222,  235,  237,  244,  248,  234,  237,
      241,  246,  234,  244,  242,  243,  238,  238,  245,  245,
      246,  250,  249,  240,  234,  243,  241,  247,  240,  242,
      251,  242,  244,  248,  271,  252,  251,  246,  250,  244,
      242,  243,  249,    0,  245,  245,  246,  250,  249,    0,

        0,    0,    0,  247,    0,  242,  251,  242,    0,    0,
      271,  252,  251,  283,  250,    0,  274,    0,  249,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  259,  283,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      274,  259,  259,  259,  259,  259,  259,  261,    0,  261,
      261,  261,  261,  261,  261,  261,  261,  261,    0,    0,
        0,    0,    0,    0,    0,  312,  274,  259,  259,  259,
      259,  259,  259,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  268,  268,  260,  260,  260,  260,  260,  260,

      262,  312,  262,  262,  262,  262,  262,  262,  262,  262,
      262,    0,  275,    0,    0,    0,    0,    0,  268,  268,
      260,  260,  260,  260,  260,  260,  263,    0,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  298,  263,
      263,  263,  263,  263,  263,  264,  275,  264,  264,  264,
      264,  264,  264,  264,  264,  264,    0,  298,    0,    0,
        0,    0,    0,    0,  298,  263,  263,  263,  263,  263,
      263,  265,  275,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  298,  265,  265,  265,  265,  265,  265,
      266,    0,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  269,  270,    0,  270,    0,  269,  272,  272,  272,
      265,  265,  265,  265,  265,  265,  273,  272,  276,  276,
      279,  279,  285,  280,  277,  273,  286,  269,  270,  282,
      270,  281,  269,  272,  272,  272,  277,  284,  281,  280,
        0,  282,  273,  272,  276,  276,  279,  279,  278,  280,
      277,  273,  278,  278,  284,  282,  285,  281,  287,  288,
      286,  289,  277,  284,  281,  280,  291,  282,    0,  290,
      287,  288,  293,  294,  278,  291,  289,  292,  278,  278,
      284,  290,  285,  292,  287,  288,  286,  289,  293,  294,
      296,  297,  291,  299,  295,  290,  287,  288,  293,  294,

      295,  291,  289,  292,    0,  301,  299,  290,  300,  292,
      296,  301,  302,  303,  293,  294,  296,  304,  310,  299,
      295,  305,    0,  300,  304,  297,  295,  308,  302,  303,
      308,  301,  299,  306,  300,  314,  296,  301,  302,  303,
      306,  305,  307,  304,  311,  311,  313,  305,  307,  300,
      304,  297,  310,  308,  302,  303,  308,  309,  316,  306,
      309,  314,  313,  315,  315,  318,  306,  305,  307,  317,
      311,  311,  313,  319,  307,  317,  322,  321,  310,  320,
      321,  318,  319,  309,  316,  358,  309,  323,  313,  315,
      315,  318,  323,  320,  325,  317,  322,  327,  324,  319,

      324,  317,  322,  321,    0,  320,  321,  318,  319,  326,
      344,  358,  326,  323,  327,    0,    0,    0,  323,  320,
        0,    0,  322,  327,  324,  345,  324,  345,  325,    0,
      344,    0,    0,    0,    0,  326,  344,    0,  326,  332,
      327,  332,  332,  332,  332,  332,  332,  332,  332,  332,
        0,  345,    0,  345,  325,  333,  344,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,    0,  333,  333,
      333,  333,  333,  333,  334,  376,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  333,  333,  333,  333,  333,  333,

      335,  376,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  377,  335,  335,  335,  335,  335,  335,  336,
      347,  336,  336,  336,  336,  336,  336,  336,  336,  336,
        0,    0,  347,    0,    0,  343,    0,    0,  377,  335,
      335,  335,  335,  335,  335,  338,  347,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  340,  347,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  343,
      340,  340,  340,  340,  340,  340,  342,    0,  342,  342,
      342,  342,  342,  342,  342,  342,  342,    0,    0,    0,
      356,    0,    0,    0,    0,  343,  340,  340,  340,  340,

      340,  340,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  346,  348,  341,  341,  341,  341,  341,  341,  349,
      350,  351,  350,  353,  356,  359,    0,  346,  348,  351,
      353,  354,  381,  359,  354,  349,    0,  346,  348,  341,
      341,  341,  341,  341,  341,  349,  350,  351,  350,  353,
      356,  359,  355,  346,  348,  351,  353,  354,  381,  359,
      354,  349,  352,  352,  355,  352,  352,  352,  352,  352,
      352,  352,  357,  352,  360,  357,  365,  361,  355,  362,
      363,  363,    0,  352,  352,  361,  366,  362,  364,  364,
      355,  360,    0,  367,  366,  368,  365,    0,  357,  367,

      360,  357,  365,  361,  368,  362,  363,  363,  369,  370,
      370,  361,  366,  362,  364,  364,  371,  360,  372,  367,
      366,  368,  365,  374,  378,  367,  372,  373,  369,  374,
      368,  375,  378,  371,  369,  370,  370,  375,  379,  373,
      380,  379,  371,  380,  372,  382,  383,  382,  386,  374,
      378,  388,  372,  373,  369,  374,  389,  375,  378,  371,
      383,  384,  385,  375,  379,  373,  380,  379,    0,  380,
      384,  382,  383,  382,  386,  385,  387,  390,  385,  392,
      394,  391,  392,  393,    0,  388,  383,  384,  385,  391,
      389,  396,  400,  396,  387,  419,  384,    0,  395,  393,

        0,  385,  387,  390,  385,  392,  394,  391,  392,  393,
      395,  388,  397,  398,  398,  391,  389,  396,  397,  396,
      387,  399,  401,  420,  395,  393,  400,  420,  418,  419,
      399,  418,  422,  422,  401,    0,  395,    0,  397,  398,
      398,    0,    0,    0,  397,  426,    0,  399,  401,  420,
        0,    0,  400,  420,  418,  419,  399,  418,  422,  422,
      401,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      406,  426,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  408,    0,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  429,  408,  408,  408,  408,  408,

      408,  410,    0,  410,  410,  410,  410,  410,  410,  410,
      410,  410,    0,    0,    0,    0,    0,    0,    0,    0,
      429,  408,  408,  408,  408,  408,  408,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  423,  431,  409,  409,
      409,  409,  409,  409,  411,  431,  411,  411,  411,  411,
      411,  411,  411,  411,  411,    0,  423,    0,    0,    0,
        0,    0,  423,  431,  409,  409,  409,  409,  409,  409,
      412,  431,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  413,  423,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  451,  413,  413,  413,  413,  413,  413,

      414,  452,  414,  414,  414,  414,  414,  414,  414,  414,
      414,    0,    0,    0,    0,    0,    0,    0,    0,  451,
      413,  413,  413,  413,  413,  413,  415,  452,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  425,  415,
      415,  415,  415,  415,  415,  416,  421,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  430,    0,  425,  428,
      428,  421,  430,  424,  425,  415,  415,  415,  415,  415,
      415,  417,  421,  427,  417,  424,    0,    0,  433,  433,
      417,    0,  430,  427,  425,  428,  428,  421,  430,  424,
      432,  427,  427,    0,  434,  435,  432,  417,  432,  427,

      417,  424,  435,  432,  433,  433,  417,  436,  440,  427,
      434,  437,    0,  436,  438,    0,  432,  427,  427,  439,
      434,  435,  432,    0,  432,  441,  440,  458,  435,  432,
      438,  437,  442,  436,  440,  439,  434,  437,  443,  436,
      438,  441,  444,  444,  443,  439,  445,  446,    0,  447,
      442,  441,  440,  458,    0,  450,  438,  437,  442,  448,
      450,  439,  445,  446,  443,  447,    0,  441,  444,  444,
      443,  460,  445,  446,  448,  447,  442,  449,  453,    0,
      449,  450,  454,  454,  461,  448,  450,  460,  445,  446,
      461,  447,  455,  455,  456,  459,  456,  460,  453,  462,

      448,  457,  457,  449,  453,  459,  449,    0,  454,  454,
      461,  463,  459,  460,  464,    0,  461,  462,  455,  455,
      456,  459,  456,  463,  453,  462,  470,  457,  457,  465,
      465,  459,  467,  466,  464,  466,  501,  463,  459,  467,
      464,  469,  468,  462,  468,  471,  507,  473,  469,  463,
      473,  472,  470,  472,  507,  465,  465,  471,  467,  466,
      464,  466,  501,    0,    0,  467,    0,  469,  468,    0,
      468,  471,  507,  473,  469,    0,  473,  472,    0,  472,
      507,    0,  478,  471,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  479,    0,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  480,    0,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,    0,  480,  480,  480,
      480,  480,  480,  481,  516,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  480,  480,  480,  480,  480,  480,  482,
      516,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  493,  482,  482,  482,  482,  482,  482,  483,  518,
      483,  483,  483,  483,  483,  483,  483,  483,  483,    0,
        0,  493,    0,    0,    0,    0,    0,  493,  482,  482,
      482,  482,  482,  482,  485,  518,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  487,  493,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,    0,  487,
      487,  487,  487,  487,  487,  489,    0,  489,  489,  489,
      489,  489,  489,  489,  489,  489,    0,    0,  495,    0,
        0,    0,    0,    0,  490,  487,  487,  487,  487,  487,
      487,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      490,  491,  488,  488,  488,  488,  488,  488,  491,  492,
      490,  494,  495,    0,    0,  498,  492,  498,  500,  499,
      494,  500,    0,  496,  499,    0,  490,  491,  488,  488,
      488,  488,  488,  488,  491,  492,  503,  494,  495,  496,

      497,  498,  492,  498,  500,  499,  494,  500,  502,  496,
      499,  504,  506,  497,  505,  505,  503,  502,  508,  510,
      509,    0,  503,  511,  508,  496,  497,  504,  506,  509,
      511,  512,  515,  512,  502,  510,  517,  504,  506,  497,
      505,  505,  503,  502,  508,  510,  509,  513,  514,  511,
      508,  514,  517,  504,  506,  509,  511,  512,  521,  512,
      519,  510,  517,  522,  513,  520,  515,  523,  520,  524,
      525,  527,  522,  513,  514,  528,  529,  514,  517,  526,
      519,  526,  533,  535,  521,  536,  519,  530,  531,  522,
      513,  520,  515,  523,  520,  524,  525,  527,  522,  530,

      532,  528,  529,  536,  531,  526,  519,  526,  533,  534,
      537,  536,  538,  530,  531,  539,  532,  535,  542,  541,
      538,    0,  534,  540,  539,  530,  532,  537,  545,  536,
      531,  541,  549,  544,  542,  534,  537,  543,  538,  543,
      540,  539,  532,  535,  542,  541,  538,  544,  534,  540,
      539,  546,  566,  537,  545,  547,  548,  541,  549,  544,
      542,  548,  566,  543,  575,  543,  540,  546,  570,  570,
      547,    0,    0,  544,    0,    0,    0,  546,  566,    0,
        0,  547,  548,    0,    0,    0,    0,  548,  566,    0,
      575,    0,    0,  546,  570,  570,  547,  553,  553,  553,

      553,  553,  553,  553,  553,  553,  554,    0,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  556,    0,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
        0,  556,  556,  556,  556,  556,  556,  558,    0,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  556,  556,  556,
      556,  556,  556,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  564,  567,  557,  557,  557,  557,  557,  557,
      561,  567,  561,  561,  561,  561,  561,  561,  561,  561,
      561,    0,  564,    0,    0,    0,    0,    0,  564,  567,

      557,  557,  557,  557,  557,  557,  560,  567,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  564,  560,
      560,  560,  560,  560,  560,  563,  594,  563,  563,  563,
      563,  563,  563,  563,  563,  563,    0,    0,    0,    0,
        0,    0,  574,    0,    0,  560,  560,  560,  560,  560,
      560,  562,  594,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  565,  562,  562,  562,  562,  562,  562,
      568,  569,  565,  571,    0,    0,  574,    0,  577,  571,
      569,  577,  568,  576,  572,  573,    0,    0,    0,  565,
      562,  562,  562,  562,  562,  562,  568,  569,  565,  571,

      572,  573,  574,  576,  577,  571,  569,  577,  568,  576,
      572,  573,  578,  581,  579,  580,  582,  583,  586,  578,
      579,  580,  584,  582,  588,  584,  572,  573,  587,  576,
      585,  585,  590,  581,  592,    0,  592,  583,  578,  581,
      579,  580,  582,  583,  587,  578,  579,  580,  584,  582,
      595,  584,  586,  589,  587,  591,  585,  585,  588,  581,
      592,  589,  592,  583,  591,  593,  590,  596,  593,  597,
      587,  599,  600,  598,  599,  600,  595,  601,  586,  589,
      598,  591,  604,  607,  588,    0,  603,  589,  610,    0,
      591,  593,  590,  596,  593,  597,  602,  599,  600,  598,

      599,  600,  603,  601,  608,  602,  598,  605,  606,  607,
      609,  608,  603,  609,  610,  605,  604,  611,  612,  613,
      606,  629,  602,  629,  614,    0,    0,    0,  603,    0,
      608,  602,    0,  605,  606,  613,  609,  608,  638,  609,
      614,  605,  604,  611,  612,  613,  606,  629,    0,  629,
      614,  619,  619,  619,  619,  619,  619,  619,  619,  619,
        0,  613,    0,    0,  638,    0,  614,  620,    0,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  640,
      620,  620,  620,  620,  620,  620,  621,  645,  621,  621,
      621,  621,  621,  621,  621,  621,  621,    0,  649,    0,

        0,    0,    0,    0,    0,  640,  620,  620,  620,  620,
      620,  620,  622,  645,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  649,  622,  622,  622,  622,  622,
      622,  623,  635,  623,  623,  623,  623,  623,  623,  623,
      623,  623,    0,    0,  635,    0,    0,    0,    0,    0,
        0,  622,  622,  622,  622,  622,  622,  624,  635,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  626,
      635,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,    0,  626,  626,  626,  626,  626,  626,  628,    0,
      628,  628,  628,  628,  628,  628,  628,  628,  628,    0,

        0,    0,    0,  642,    0,    0,    0,  634,  626,  626,
      626,  626,  626,  626,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  634,  636,  627,  627,  627,  627,  627,
      627,  630,  631,  634,  632,  630,  632,  642,  633,  631,
      633,  636,  637,    0,    0,  641,  637,  641,    0,  634,
      636,  627,  627,  627,  627,  627,  627,  630,  631,  643,
      632,  630,  632,  642,  633,  631,  633,  636,  637,  639,
      644,  641,  637,  641,  646,  647,  643,  648,  639,  650,
        0,  652,  655,  656,  653,  643,  651,  657,  644,  648,
        0,  647,  646,  653,  655,  639,  644,  659,  660,  650,

      646,  647,  643,  648,  639,  650,  651,  652,  655,  656,
      653,  658,  651,  657,  644,  648,  654,  647,  646,  653,
      655,  661,  654,  659,  660,  650,  662,  658,  663,  664,
      665,  666,  651,  667,  668,  669,  670,  658,  671,  671,
      666,  664,  654,    0,  686,  667,  688,  661,  654,  692,
      668,  672,  662,  658,  663,  664,  665,  666,    0,  667,
      668,  669,  670,    0,  671,  671,  666,  664,  693,  672,
      686,  667,  688,    0,  701,  692,  668,  672,  676,    0,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      695,    0,    0,    0,  693,  672,  678,    0,  678,  678,

      678,  678,  678,  678,  678,  678,  678,  678,  701,  678,
      678,  678,  678,  678,  678,  680,  695,  680,  680,  680,
      680,  680,  680,  680,  680,  680,    0,    0,    0,    0,
        0,    0,    0,  702,  701,  678,  678,  678,  678,  678,
      678,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      689,  689,  679,  679,  679,  679,  679,  679,  682,  702,
      682,  682,  682,  682,  682,  682,  682,  682,  682,    0,
        0,    0,    0,    0,    0,    0,  689,  689,  679,  679,
      679,  679,  679,  679,  681,    0,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  691,  681,  681,  681,

      681,  681,  681,  684,  691,  684,  684,  684,  684,  684,
      684,  684,  684,  684,    0,    0,    0,    0,    0,    0,
        0,    0,  691,  681,  681,  681,  681,  681,  681,  683,
      691,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  685,  683,  683,  683,  683,  683,  683,  687,  690,
      694,  696,  697,  696,  687,    0,  690,  685,  698,  699,
        0,  697,  700,  700,  698,  699,  694,  685,  683,  683,
      683,  683,  683,  683,  687,  690,  694,  696,  697,  696,
      687,  705,  690,  685,  698,  699,  703,  697,  700,  700,
      698,  699,  694,  703,  704,  706,  707,  708,  705,  709,

      712,  714,  714,  704,  713,  717,  716,  705,  733,  734,
      715,  706,  703,  707,  708,  712,  713,  715,  716,  703,
      704,  706,  707,  708,  705,  709,  712,  714,  714,  704,
      713,  717,  716,    0,  733,  734,  715,  706,    0,  707,
      708,  712,  713,  715,  716,  722,    0,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  738,  722,  722,
      722,  722,  722,  722,  723,  739,  723,  723,  723,  723,
      723,  723,  723,  723,  723,    0,    0,    0,    0,    0,
        0,    0,    0,  738,  722,  722,  722,  722,  722,  722,
      724,  739,  724,  724,  724,  724,  724,  724,  724,  724,

      724,  724,  737,  724,  724,  724,  724,  724,  724,  725,
      743,  725,  725,  725,  725,  725,  725,  725,  725,  725,
        0,    0,  737,    0,    0,    0,    0,    0,  737,  724,
      724,  724,  724,  724,  724,  726,  743,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  728,  737,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,    0,
      728,  728,  728,  728,  728,  728,  730,    0,  730,  730,
      730,  730,  730,  730,  730,  730,  730,    0,    0,    0,
        0,    0,    0,    0,    0,  735,  728,  728,  728,  728,
      728,  728,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  735,  736,  729,  729,  729,  729,  729,  729,  731,
      732,  735,  732,  731,  741,  742,  745,  741,  736,    0,
      746,  740,  750,    0,  742,    0,    0,  735,  736,  729,
      729,  729,  729,  729,  729,  731,  732,  740,  732,  731,
      741,  742,  745,  741,  736,  744,  746,  740,  747,  748,
      742,  744,  749,  744,  751,  753,  750,  752,  754,  754,
      768,  770,  776,  740,  771,  747,  781,  771,  749,  748,
      751,  744,  752,    0,  747,  748,    0,  744,  749,  744,
      751,  753,  750,  752,  754,  754,  768,  770,  776,  755,
      771,  747,  781,  771,  749,  748,  751,  755,  752,  759,

        0,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,    0,    0,    0,    0,  755,    0,    0,  814,    0,
        0,    0,    0,  755,  761,    0,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  815,  761,  761,  761,
      761,  761,  761,  763,  814,  763,  763,  763,  763,  763,
      763,  763,  763,  763,    0,    0,    0,    0,    0,    0,
        0,  807,  815,  761,  761,  761,  761,  761,  761,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  774,  832,
      762,  762,  762,  762,  762,  762,  765,  807,  765,  765,
      765,  765,  765,  765,  765,  765,  765,    0,  774,    0,

        0,    0,    0,    0,  774,  832,  762,  762,  762,  762,
      762,  762,  764,  807,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  774,  764,  764,  764,  764,  764,
      764,  767,  833,  767,  767,  767,  767,  767,  767,  767,
      767,  767,    0,  769,  775,    0,    0,    0,    0,    0,
      769,  764,  764,  764,  764,  764,  764,  766,  833,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  769,
      766,  766,  766,  766,  766,  766,  769,  772,  775,  772,
      778,  779,    0,  782,  779,  777,  780,  801,  780,  782,
      783,  783,  784,  778,    0,    0,  766,  766,  766,  766,

      766,  766,  777,  772,  775,  772,  778,  779,  784,  782,
      779,  777,  780,  786,  780,  782,  783,  783,  784,  778,
      785,  801,  785,  802,  813,  813,  800,  802,  777,  786,
        0,  834,    0,    0,  784,    0,    0,    0,    0,  786,
        0,    0,  800,    0,    0,    0,  785,  801,  785,  802,
      813,  813,  800,  802,    0,  786,  791,  834,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  800,  791,
      791,  791,  791,  791,  791,  792,  838,  792,  792,  792,
      792,  792,  792,  792,  792,  792,    0,  831,    0,    0,
        0,    0,    0,    0,    0,  791,  791,  791,  791,  791,

      791,  793,  838,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  808,  793,  793,  793,  793,  793,  793,
      794,  831,  794,  794,  794,  794,  794,  794,  794,  794,
      794,    0,    0,  808,    0,    0,    0,    0,    0,  808,
      793,  793,  793,  793,  793,  793,  795,  831,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  797,  808,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
        0,  797,  797,  797,  797,  797,  797,  799,    0,  799,
      799,  799,  799,  799,  799,  799,  799,  799,    0,    0,
        0,    0,    0,    0,  841,    0,  803,  797,  797,  797,

      797,  797,  797,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  803,  804,  798,  798,  798,  798,  798,  798,
      841,  805,  803,  805,    0,    0,    0,    0,  811,  804,
      806,  811,  862,  829,  809,  810,  829,  835,  803,  804,
      798,  798,  798,  798,  798,  798,  806,  805,  806,  805,
      809,  810,  812,  835,  811,  804,  806,  811,  862,  829,
      809,  810,  829,  835,  812,    0,    0,    0,    0,    0,
        0,    0,  806,    0,  806,    0,  809,  810,  812,  835,
        0,    0,    0,  839,  839,  839,    0,  839,    0,  820,
      812,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  822,    0,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  839,  822,  822,  822,  822,  822,  822,
      824,    0,  824,  824,  824,  824,  824,  824,  824,  824,
      824,    0,    0,    0,    0,    0,    0,    0,    0,  839,
      822,  822,  822,  822,  822,  822,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  836,  863,  823,  823,  823,
      823,  823,  823,  826,  836,  826,  826,  826,  826,  826,
      826,  826,  826,  826,    0,  864,    0,    0,    0,    0,
        0,  836,  863,  823,  823,  823,  823,  823,  823,  825,
      836,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  864,  825,  825,  825,  825,  825,  825,  828,    0,
      828,  828,  828,  828,  828,  828,  828,  828,  828,    0,
      830,    0,    0,    0,    0,    0,    0,    0,  825,  825,
      825,  825,  825,  825,  827,  830,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  830,  827,  827,  827,
      827,  827,  827,  837,  840,  842,  840,  843,  837,  844,
      859,  830,  860,  867,  859,  843,  860,    0,  887,  892,
      869,  844,  842,  827,  827,  827,  827,  827,  827,  837,
      840,  842,  840,  843,  837,  844,  859,    0,  860,  867,
      859,  843,  860,  869,  887,  892,    0,  844,  842,  850,

        0,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  889,  850,  850,  850,  850,  850,  850,  851,  869,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  889,
        0,    0,    0,    0,  870,    0,    0,  889,  850,  850,
      850,  850,  850,  850,  852,    0,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  889,  865,  852,  852,  852,
      852,  852,  852,  853,  870,  853,  853,  853,  853,  853,
      853,  853,  853,  853,    0,    0,  865,    0,    0,    0,
        0,    0,  865,  852,  852,  852,  852,  852,  852,  854,
      870,  854,  854,  854,  854,  854,  854,  854,  854,  854,

      854,  856,  865,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,    0,  856,  856,  856,  856,  856,  856,
      858,  866,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  871,  868,  871,  861,  868,  872,  866,  890,  873,
      856,  856,  856,  856,  856,  856,  861,  866,  874,  893,
      900,  902,  872,  861,  861,  873,  874,  871,  890,  871,
      861,  868,  872,  866,  890,  873,    0,    0,    0,    0,
        0,    0,  861,  918,  874,  893,  900,  902,  872,  861,
      861,  873,  874,  896,  890,    0,  880,  868,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  882,  918,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  922,
      896,  882,  882,  882,  882,  882,  882,  883,  923,  883,
      883,  883,  883,  883,  883,  883,  883,  883,    0,    0,
      897,    0,    0,    0,    0,  922,  896,  882,  882,  882,
      882,  882,  882,  884,  923,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  897,  884,  884,  884,  884,
      884,  884,  885,  888,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  891,  894,  895,  894,  898,  899,  891,
      888,  897,  884,  884,  884,  884,  884,  884,  917,  888,
      913,  891,  901,  895,  903,  901,  917,  913,  916,  891,

      894,  895,  894,  916,  898,  891,  888,  899,  924,  915,
      903,    0,  915,    0,  917,    0,  913,  891,  901,  895,
      903,  901,  917,  913,  916,    0,    0,    0,    0,  916,
      898,  914,    0,  899,  924,  915,  903,  908,  915,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  925,  914,
      908,  908,  908,  908,  908,  908,  909,  914,  909,  909,
      909,  909,  909,  909,  909,  909,  909,    0,  920,  926,
      920,    0,    0,  927,  925,  914,  908,  908,  908,  908,
      908,  908,  910,    0,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  920,  926,  920,  921,  921,  927,

      921,  921,  921,  921,  921,  921,  935,  932,  921,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  921,  921,
      936,  937,  938,  939,  941,  941,    0,    0,    0,    0,
        0,  953,  935,    0,  954,    0,  936,  942,  942,  939,
      942,  942,  942,  942,  942,  942,  936,    0,  942,  939,
      941,  941,  943,  943,  949,  937,  938,  953,  942,  942,
      954,  948,  936,  950,  951,  939,  948,    0,  950,  943,
      951,  956,  949,  952,  952,    0,  955,  955,  943,  943,
      949,  937,  938,  962,  962,    0,    0,  948,  965,  950,
      951,  956,  948,  955,  950,  943,  951,  956,  949,  952,

      952,  957,  955,  955,  966,  963,  964,  967,  957,  962,
      962,  963,  964,  968,  965,  970,  971,  956,  973,  955,
      972,  972,  977,  971,  981,  979,    0,  957,  979,  978,
      966,  963,  964,  967,  957,  970,  978,  963,  964,  968,
      983,  970,  971,  985,  973,  986,  972,  972,  977,  971,
      981,  979,  980,  980,  979,  978,  984,  984,  992,  992,
      991,  970,  978,  993,  994,  986,  983,  991,  996,  985,
      997,  986, 1001, 1002, 1001, 1004, 1009,    0,  980,  980,
        0,    0,  984,  984,  992,  992,  991,    0,  996,  993,
      994,  986,    0,  991,  996,    0,  997,    0, 1001, 1002,

     1001, 1004, 1009,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  996, 1020, 1020, 1020, 1020, 1021,
     1021, 1021, 1021, 1022, 1022, 1022, 1022, 1023,    0, 1023,
     1023, 1024, 1024, 1024, 1024, 1025,    0, 1025, 1025, 1026,
     1026, 1028, 1028, 1029, 1029, 1030, 1030, 1031, 1031, 1032,
     1032, 1033, 1033, 1034, 1034, 1035, 1035, 1036, 1036, 1037,
     1037, 1038,    0, 1038, 1038, 1039, 1039, 1040, 1040, 1041,
     1041, 1042, 1042, 1043, 1043, 1044, 1044, 1045, 1045, 1046,
     1046, 1047, 1047, 1048, 1048, 1049, 1049, 1050, 1050, 1051,
     1051, 1052, 1052, 1053, 1053, 1054, 1054, 1055, 1055, 1056,

     1056, 1057, 1057, 1058, 1058, 1059, 1059, 1060, 1060, 1061,
     1061, 1062, 1062, 1063, 1063, 1064, 1064, 1066, 1066, 1067,
     1067, 1068, 1068, 1070, 1070, 1071, 1071, 1072, 1072, 1075,
     1075, 1076, 1076, 1077, 1077, 1079,    0, 1079, 1079, 1080,
        0, 1080, 1080, 1081, 1081, 1082, 1082, 1085,    0, 1085,
     1085, 1086,    0, 1086, 1086, 1087, 1087, 1088, 1088, 1089,
     1089, 1090, 1090, 1091, 1091, 1093, 1093, 1094, 1094, 1095,
     1095, 1096, 1096, 1097, 1097, 1099, 1099, 1100, 1100, 1101,
     1101, 1103, 1103, 1105, 1105, 1106, 1106, 1107, 1107, 1109,
     1109, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[125] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2140 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2250 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1020 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5892 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::LOGFEATURE_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::FEATURE_EXPR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 179 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 180 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 110:
YY_RULE_SETUP
#line 187 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 196 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 205 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 214 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 223 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 232 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 241 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 253 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 260 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 281 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 313 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 341 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%20x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 351 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%20u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 360 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 363 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3124 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1020 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1020 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1019);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 363 "SrvLexer.l"



