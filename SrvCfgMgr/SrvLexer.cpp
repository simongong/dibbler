#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 123
#define YY_END_OF_BUFFER 124
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1012] =
    {   0,
        1,    1,    0,    0,    0,    0,  124,  122,    2,    1,
        1,  122,  104,  122,  122,  121,  121,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      108,  108,  123,    1,    1,    1,    0,  116,  104,    0,
      116,  106,  105,  121,    0,    0,  120,    0,  113,   87,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      101,  117,  117,   89,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,   19,   20,  117,  117,  117,
      117,  117,  117,  117,  117,  107,  105,  121,    0,    0,
        0,  112,  118,  111,  111,  117,  117,  117,  117,  117,
       88,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      100,  121,    0,    0,    0,    0,  110,  110,    0,  111,
        0,  111,  117,  117,  117,   67,  117,  117,  117,  117,

      117,  117,  117,  117,   95,  117,  117,  117,   33,  117,
       15,  117,   47,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,    0,  117,  117,  117,  117,  117,  117,
       26,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  102,  117,  117,  117,  117,
      121,    0,  119,    0,    0,    0,  110,    0,  110,    0,
      111,  111,  111,  111,  117,  117,  117,  117,   94,  117,
      117,  117,    4,  117,  117,  117,  117,  117,  117,  117,
      103,  117,  117,    3,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,    0,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,    7,  117,
       46,  117,   27,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,    0,    0,    0,    0,    0,  110,
      110,  110,  110,    0,  111,  111,  111,    0,  111,  117,
      117,  117,  117,  117,  117,  117,  117,  117,   32,  117,
      117,  117,  117,  117,   40,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,    0,    0,  117,  117,  117,   38,  117,  117,  117,
      117,   36,  117,  117,  117,   63,  117,  117,  117,   98,
      117,  117,  117,  117,  117,  117,  117,    0,    0,    0,

        0,  110,  110,  110,    0,  110,    0,    0,  111,  111,
      111,  111,  117,  117,   35,  117,  117,  117,  117,  117,
      117,    0,  117,  117,   97,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,    0,    0,  117,  117,  117,
      117,  117,   61,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,   24,  117,  117,  117,  119,    0,
        0,    0,    0,    0,  110,  110,  110,  110,    0,  111,
      111,  111,    0,  111,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,    0,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       48,  117,   57,  117,  117,  117,   12,   10,   86,  117,
       45,    0,    0,  117,  117,  117,   59,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,    5,  117,
      117,  117,   16,    0,    0,    0,    0,  110,  110,  110,
        0,  110,  115,  111,  111,  111,  111,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,    0,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   11,   66,    0,    0,
      117,  117,  117,   60,  117,  117,  117,  117,  117,   34,

      117,  117,    6,   96,   42,  117,  117,    0,    0,    0,
        0,  114,  110,  110,  110,  110,  111,  111,  111,    0,
      111,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       58,  117,    0,  117,  117,  117,  117,  117,  117,  117,
      117,   39,  117,  117,   37,  117,  117,  117,   13,  117,
        0,    0,   54,   53,   41,  117,   25,  117,  117,  117,
       44,   43,  117,  117,  119,    0,    0,  110,  110,  110,
        0,  110,  111,  111,  111,  111,  117,   17,  117,   65,
      117,  117,  117,   74,  117,  117,    0,  117,  117,  117,
      117,  117,  117,   77,  117,  117,  117,  117,  117,  117,

       14,   56,   55,  117,  117,  117,  117,  117,   62,    0,
        0,    0,    0,  110,  110,  110,  110,  111,  111,  111,
        0,  111,  117,  117,   99,   76,  117,  117,  117,    0,
       85,  117,  117,  117,   52,  117,   78,   64,  117,  117,
      117,    8,  117,  117,   28,  117,  117,    0,    0,    0,
      110,  110,  110,    0,  110,  111,  111,  111,  111,  117,
      117,   75,  117,  117,    0,  117,  117,   51,  117,  117,
      117,  117,   68,  117,  117,  117,  117,  117,  119,    0,
        0,    0,  110,  110,  110,  110,  111,  111,  111,    0,
      111,  117,  117,  117,  117,    0,  117,  117,  117,  117,

      117,  117,  117,  117,  117,   18,   23,    0,    0,  109,
      112,  110,  110,  110,    0,  110,  111,  111,  111,  111,
      117,  117,  117,   30,    0,    0,  117,  117,  117,   79,
      117,  117,   29,  117,  117,  117,    0,    0,  109,    0,
      110,  110,  110,  110,  110,  111,  111,  111,    0,  111,
      117,  117,  117,    0,    0,   31,  117,  117,   80,  117,
      117,  117,  117,  117,  117,  117,  119,  109,  112,  110,
        0,  110,  110,  110,  110,  111,  111,  111,   69,  117,
      117,  117,  117,    0,    0,  117,  117,  117,  117,  117,
      117,   50,  117,   22,  117,    0,  109,  110,  110,  110,

      110,  111,  111,  111,  117,  117,  117,  117,  117,    0,
        0,  117,  117,   81,   82,   83,   84,    9,   21,    0,
      110,  110,    0,  110,  110,  111,   49,  117,  117,  117,
      117,    0,    0,  117,  117,  119,  110,  110,  111,  117,
      117,  117,  117,    0,    0,    0,  117,  117,  117,    0,
      110,  110,    0,  117,  117,  117,  117,    0,    0,    0,
       90,  117,  117,  117,   90,  109,  110,  110,   70,  117,
      117,  117,    0,   92,    0,  117,   92,  117,  109,  110,
      110,    0,  117,  117,   73,    0,   91,  117,   91,    0,
      110,  110,  117,   71,   93,   93,    0,  110,  110,    0,

       72,  119,  110,  110,    0,  110,  110,    0,  110,  110,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1102] =
    {   0,
        0,    0, 1140, 1139,    0,    0, 1146, 5843, 5843,   73,
       75, 1140,    0, 1136,   72,   72,   34, 1120, 1118,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  356,  372,  399,   67,  357,  180,  209,
     5843, 1099, 5843,  111,  137,  222, 1104, 5843,    0, 1101,
     1100, 5843,    0,  457, 1084,  476, 5843,    0,  502, 5843,
       61,  545,   86,   89,  185,  208,  231,  279,  221,  265,
      288,  559,  342,  283,  285,  388,  377,  389,  339,  395,
      326,  410,  394,  544,  561,  469,  557,  392,  574,  507,
      326,  542,  576,  455,  538,  584,  582,  594,  606,  462,

      593,  599,  596,  629,  630,  581,  612,  614,  636,  613,
      643,  627,  641,  645,  648, 5843,    0,  706, 1080,  725,
     1077,  751,    0,  796,  770,  839,  649,  650,  828,  832,
      666,  831,  837,  698,  835,  855,  704,  836,  838,  856,
      875,  887,  886,  888,  873,  756,  876,  896,  907,  891,
      906,  908,  877,  927,  924,  920,  960,  928,  941,  948,
      940,  938,  959,  958,  971,  976,  962,  975,  981, 1006,
      983,  991,  992, 1011, 1010, 1014, 1013, 1012, 1042, 1033,
      738, 1100,  814, 1074, 1072, 1069, 1147, 1119,  823, 1192,
     1235, 1166, 1278, 1008, 1213, 1015, 1028, 1079, 1100, 1230,

     1266, 1034, 1277, 1265, 1022, 1269, 1270, 1309, 1031, 1275,
     1035, 1315, 1305, 1276, 1320, 1196, 1152, 1310, 1312, 1365,
     1319, 1326, 1314, 1080, 1344, 1351, 1328, 1317, 1371, 1366,
     1134, 1379, 1378, 1380, 1390, 1396, 1401, 1403, 1415, 1419,
     1423, 1437, 1409, 1440, 1444, 1374, 1432, 1453, 1448, 1447,
     1211, 1066, 1065, 1021, 1002, 1511, 1522, 1565, 1541, 1584,
     1610, 1629, 1655, 1674,  974, 1451, 1657, 1655, 1426, 1668,
     1552, 1501, 1597, 1670, 1687, 1672, 1674, 1692, 1446, 1689,
     1464, 1705, 1690, 1725, 1719, 1720, 1721, 1722, 1717, 1728,
     1739, 1730, 1729, 1760, 1608, 1740, 1759, 1758, 1775, 1777,

     1769, 1764, 1774, 1779, 1792, 1791, 1797, 1781, 1544, 1798,
     1654, 1810, 1776, 1819, 1812, 1825, 1828, 1829, 1831, 1827,
     1843, 1864, 1847, 1850,  966,  959,  943,  906, 1908, 1924,
     1943, 1969, 1988, 1952, 2014,  905, 2026, 2069, 2045, 2005,
     1866, 1862, 2063, 1968, 2064, 2071, 1863, 2065, 2141, 2066,
     2061, 2068, 2060, 2070, 1848, 2108, 2112, 2118, 2122, 2115,
     2124, 2131, 2125, 2139, 2147, 2128, 2152, 2166, 2145, 2168,
     2169, 1917, 1964, 2172, 2170, 2177, 2062, 2181, 2197, 2185,
     2215, 2160, 2219, 2180, 2216, 2187, 2218, 2217, 2220, 2208,
     2233, 2224, 2232, 2229, 2260, 2265, 2249,  902,  892,  852,

     2297, 2323,  851, 2335, 2378, 2354, 2397, 2423, 2434, 2453,
     2479, 2498, 2262, 2479, 2314, 2257, 2481, 2357, 2478, 2494,
     2497, 2338, 2509, 2495, 2376, 2499, 2421, 2531, 2511, 2529,
     2540, 2534, 2561, 2532, 2546, 2563, 2564, 2549, 2577, 2578,
     2581, 2584, 2585, 2582, 2597, 2488, 2550, 2600, 2598, 2612,
     2595, 2615, 2583, 2634, 2632, 2628, 2647, 2645, 2650, 2635,
     2646, 2664, 2651, 2674, 2637, 2678, 2681, 2668,  823,  777,
      776,  775, 2739, 2750, 2761, 2780, 2806, 2825, 2789, 2851,
      774, 2863, 2906, 2882, 2884, 2892, 2900, 2805, 2904, 2703,
     2922, 2920, 2899, 2898, 2902, 2764, 2936, 2954, 2951, 2938,

     2955, 2949, 2950, 2952, 2956, 2979, 2947, 2959, 2983, 2991,
     2793, 2974, 2987, 2992, 2988, 2999, 2993, 2994, 2995, 3003,
     2996, 3017, 3001, 3036, 3042, 3046, 3006, 3044, 3038, 3051,
     3054, 3043, 3048, 3058, 3078, 3071, 3049, 3090, 3008, 3095,
     3098, 3087, 3060,  773,  772,  770, 3156, 3167,  740, 3179,
     3222, 3198, 3207, 3267, 3241, 3312, 3286, 3220, 3094, 3301,
     3096, 3310, 3308, 3303, 3306, 3330, 3331, 3338, 3096, 3333,
     3342, 3344, 3349, 3352, 3355, 3354, 3382, 3351, 3366, 3350,
     3383, 3387, 3209, 3394, 3093, 3389, 3254, 3358, 3391, 3401,
     3397, 3398, 3399, 3400, 3410, 3418, 3437, 3414, 3419, 3404,

     3438, 3442, 3417, 3429, 3434, 3451, 3462,  732,  731,  730,
      729, 3295, 3522, 3509, 3567, 3541, 3586,  728, 3612, 3655,
     3631, 3449, 3641, 3448, 3644, 3648, 3633, 3669, 3651, 3653,
     3501, 3656, 3526, 3652, 3554, 3697, 3699, 3546, 3702, 3701,
     3698, 3565, 3708, 3709, 3687, 3700, 3696, 3704, 3693, 3721,
     3701, 3706, 3732, 3733, 3736, 3749, 3738, 3748, 3752, 3757,
     3742, 3743, 3745, 3772,  727,  692,  687, 3815,  686, 3832,
     3875, 3851, 3920, 3894, 3965, 3939, 3960, 3750, 3957, 3751,
     3854, 3959, 3907, 3753, 3755, 3969, 3817, 3956, 3964, 3967,
     3968, 3966, 3958, 3836, 3996, 4006, 4016, 4014, 4017, 4018,

     4002, 5843, 5843, 4019, 4020, 4010, 4012, 4033, 4003,  685,
      683,  680,  673, 4093, 4081, 4138, 4112, 4157,  672, 4183,
     4226, 4202, 4216, 4011, 4072, 4080, 4204, 4221, 4239, 4094,
     4125, 4240, 4218, 4226, 4136, 4256, 4187, 4220, 4268, 4249,
     4269, 4257, 4276, 4273, 4259, 4262, 4271,  671,  571,  570,
     4334,  562, 4346, 4389, 4365, 4434, 4408, 4479, 4453, 4264,
     4439, 4267, 4469, 4272,  570, 4387, 4325, 4350, 4484, 4481,
     4473, 4474, 4368, 4477, 4476, 4520, 4482, 4521,  557,  556,
      528,  525, 4581, 4542, 4626, 4565, 4600,  524, 4671, 4714,
     4645, 4666, 4560, 4700, 4709, 4719, 4705, 4734, 4605, 4733,

     4718, 4752, 4714, 4750, 4746, 4421, 4523,  523,  522,  521,
        0, 4810,  520, 4822, 4865, 4698, 4910, 4841, 4955, 4884,
     4944, 4878, 4741, 4568, 4622, 4752, 4950, 4951, 4948, 4748,
     4975, 4954, 4749, 4843, 4979, 4984,  519,  518,  516,  515,
      514, 5044, 4936, 5089, 5016, 5063,  513, 5134,    0, 5108,
     5120, 5125, 5156, 4821, 4860, 4897, 5087, 5139, 4955, 4982,
     5023, 5042, 5128, 5153, 5173, 5166,  512,  511, 5843,  483,
        0, 5231,  482, 5243, 5262, 5288, 5307,    0, 4973, 5185,
     5285, 5306, 5319, 5033, 5094, 5135, 5305, 5196, 5195, 5302,
     5160, 5138, 5291, 5167, 5308,  481,  480,  479,  478, 5379,

     5398, 5424,  465,    0, 5310, 5358, 5377, 5309, 5412, 5173,
        0, 5381, 5453, 5230, 5289, 5290, 5300, 5321, 5357,  446,
      445,  434,    0, 5470, 5843,    0, 5382, 5425, 5426, 5453,
     5449,    0, 5445, 5503, 5474,  433,  431,  430, 5843, 5477,
     5480, 5478, 5476, 5502, 5442, 5431, 5507, 5489, 5494,  428,
      424,  406,    0, 5493, 5514, 5527, 5497, 5525, 5516, 5511,
     5843, 5542, 5532, 5529, 5524,  395,  356,  355, 5526, 5537,
     5541, 5544, 5540, 5843, 5565, 5560, 5546, 5577,  353,  352,
      350,    0, 5573, 5562, 5549, 5594, 5843, 5596, 5578,  346,
      325,  307, 5581, 5580, 5843, 5582,    0,  305,  276,    0,

     5584,  267,  262,  260,  258,  254,  251,    0,  229,  214,
     5843, 5666, 5670, 5674, 5678, 5682, 5686, 5688,  232, 5690,
     5692, 5694, 5696, 5698, 5700, 5702, 5704, 5706, 5708, 5712,
     5714, 5716, 5718, 5720, 5722, 5724, 5726, 5728, 5730, 5732,
     5734, 5736, 5738, 5740, 5742, 5744, 5746, 5748, 5750, 5752,
     5754, 5756, 5758, 5760, 5762, 5764,  231, 5766, 5768, 5770,
      230, 5772, 5774, 5776,  228,  226, 5778, 5780, 5782,  224,
     5786, 5790, 5792, 5794,  219,  217, 5798, 5802, 5804, 5806,
     5808, 5810, 5812,  214, 5814, 5816, 5818, 5820, 5822,  145,
     5824, 5826, 5828,  131, 5830,  117, 5832, 5834, 5836,   80,

     5838
    } ;

static yyconst flex_int16_t yy_def[1102] =
    {   0,
     1011,    1, 1012, 1012, 1013, 1013, 1011, 1011, 1011, 1011,
     1011, 1014, 1015, 1016, 1011, 1011,   16, 1011, 1011, 1011,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1011, 1011, 1011, 1011, 1011, 1011, 1014, 1011, 1015, 1016,
     1011, 1011, 1017, 1011, 1018,   54, 1011, 1019, 1011, 1011,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1011, 1017, 1011, 1020,  118,
     1021, 1011, 1019, 1011,  124,   62,  126,  126,   26,   26,
       26,   26,   26,  126,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1011,  182, 1022, 1023, 1024, 1011,  187, 1011, 1011,
     1011,  190,  126,  193,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1011,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      183,  183, 1023, 1025, 1026, 1011, 1011, 1011,  257, 1011,
     1011,  261, 1011,  263,  193,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1011,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1027, 1011, 1028, 1029, 1011, 1011,
      330, 1011,  332, 1011, 1011, 1011, 1011, 1011,  337,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1030,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1011, 1011,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1031, 1032, 1033,

     1011, 1011, 1011, 1011, 1011,  404, 1011, 1011, 1011,  409,
     1011,  411,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1011,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1011, 1011,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1028, 1011,
     1034, 1035, 1011, 1011, 1011,  475, 1011,  477, 1011, 1011,
     1011, 1011, 1011,  482,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1011,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1011, 1011,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1036, 1037, 1038, 1011, 1011, 1011, 1011,
     1011,  550, 1011, 1011,  554, 1011,  556,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1011,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1011, 1011,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26, 1039, 1011, 1040,
     1041, 1011, 1011,  613, 1011,  615, 1011, 1011, 1011, 1011,
      619,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1011,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1011, 1011,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1042, 1043, 1044, 1011, 1011, 1011,
     1011,  670, 1011,  673, 1011,  675,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1011,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26, 1011, 1011,   26,   26,   26,   26,   26,   26, 1045,
     1011, 1046, 1047, 1011,  714, 1011,  716, 1011, 1011, 1011,
     1011,  720,   26,   26,   26,   26,   26,   26,   26, 1011,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1048, 1049, 1050,
     1011, 1011, 1011, 1011,  753, 1011,  756, 1011,  758,   26,
       26,   26,   26,   26, 1011,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1051, 1011,
     1052, 1053, 1011,  783, 1011,  785, 1011, 1011, 1011, 1011,
      789,   26,   26,   26,   26, 1011,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26, 1054, 1055, 1056,
     1057, 1011, 1011, 1011, 1011,  814, 1011,  817, 1011,  819,
       26,   26,   26,   26, 1011, 1011,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1058, 1011, 1059, 1011,
     1060, 1011,  842, 1011,  844, 1011, 1011, 1011, 1061,  848,
       26,   26,   26, 1011, 1011,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1062, 1063, 1011, 1064,
     1065, 1011, 1011, 1011,  874, 1011,  876, 1066,   26,   26,
       26,   26,   26, 1011, 1011,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1067, 1011, 1068, 1069, 1011,

      900, 1011, 1011, 1070,   26,   26,   26,   26,   26, 1011,
     1071,   26, 1072,   26,   26,   26,   26,   26,   26, 1073,
     1011, 1074, 1075, 1011, 1011, 1076,   26,   26,   26,   26,
       26, 1077, 1011, 1078,   26, 1079, 1080, 1081, 1011,   26,
       26,   26,   26, 1011, 1011, 1011,   26,   26,   26, 1082,
     1011, 1083, 1084,   26,   26,   26,   26, 1011, 1011, 1011,
     1011,   26,   26,   26,   26, 1085, 1086, 1087,   26,   26,
       26,   26, 1011, 1011, 1011,   26,   26,   26, 1088, 1011,
     1089, 1090,   26,   26,   26, 1011, 1011,   26,   26, 1091,
     1092, 1093,   26,   26, 1011,   26, 1094, 1011, 1095, 1096,

       26, 1011, 1097, 1098, 1091, 1011, 1099, 1100, 1101, 1011,
        0, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011
    } ;

static yyconst flex_int16_t yy_nxt[5919] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
     1011,   61,  845,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  111,   61,   61, 1011,   61,   61,   85,
       61,  127,   88,   44,   45,  128,   61,   80,   58, 1004,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  111,
       61,   61,   61, 1002,   61,   85,   61,  127,   88,   46,
       45,  128,   61,   80,   58,   61,   61,  992,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  968,  114,   61,  939,
       61,  938,   61,   61,   44,   45,  926,  129,  904,   70,
      899,   81,  878,  841,  123, 1008,  115,   62,   62,   93,
       62,   94,   61,  114,   61,   61,   61,   82,   61,   61,
     1008,   61,   61,  129,   86,   70,   71,   81,   62,   62,
       87,   62,  115,  132,   61,  130,   61,   72,   61,   61,
       73,   61, 1008,   82,   61, 1000,   61,   61,   61, 1011,
       86, 1008,   71, 1000,   62,   62,   87,   62, 1005,  132,
       61,  130,   61,   72,   89,   61,   73, 1000,   90,  133,

       61,   95,   61,   62,   91,  131,   74,   75,   61,   92,
       61,   76,   96,  134,   61,   97,   77,   78,   61,  138,
       89,  139,   61,   79,   90,  133,  982,   95, 1000,   62,
       91,  131,   74,   75,   61,   92,   61,   76,   96,  134,
       61,   97,   77,   78,   61,  138,  982,  139,   61,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61, 1011,
      145,   61,   61,   61,   61,   61,   61,  869,   61,   61,
      143,  982,   61,  953,  990,   61,  982,  953,  137,   98,
      112,   83,   61,   99,  113,   61,  145,   61,   61,   61,
       61,   61,   61,  100,   61,   61,  143,  101,   61,   61,

       61,   61,  102,  103,  137,   98,  112,   83,   61,   99,
      113,   61,  106,  107,  104,  105,  840,  140,  141,  100,
       61,  147,  108,  101,  142,   61,   61,  953,  102,  103,
      109,   61,   61,  144,  154,   61,  146,   61,   61,  110,
      104,  105,   61,  140,  141,  923,   61,  147,  108,  811,
      142,  953,  923,   61,  950,  923,  109,   61,   61,  144,
      154,   61,  146,   61,   61,  110,  871,  782,   61,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  119,   61,
      120,  120,  120,  120,  120,  120,  849,   57,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  152,   61,  923,

      871,  840,  122,  815,  871,  167,  120,  120,  120,  120,
      120,  120,   61,   57,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  152,   61,  125,  125,  125,  125,  125,
      125,  167,  840,  896,  790,  871,  869,  840,   61,  782,
      713,  754,  840,  782,  122,  721,  811,  160,  157,  782,
       61,  125,  125,  125,  125,  125,  125,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  119,  148,  126,  126,
      126,  126,  126,  126,  157,   66,   61,  713,  808,  796,
      158,   61,  135,  671,  149,   61,  153,   61,   61,  150,
      136,  782,  713,  148,  126,  126,  126,  126,  126,  126,

       61,   66,   61,  151,   61,  155,  158,   61,  135,  162,
      149,   61,  153,   61,   61,  150,  136,   61,  159,   61,
      156,  161,  169,  174,   61,   61,   61,   61,   61,  151,
       61,  155,  163,  168,  170,  162,   61,   61,  164,   61,
      165,  166,   61,   61,  159,   61,  156,  161,  169,   61,
       61,   61,  171,   61,  173,   61,  176,   61,  163,  168,
      170,  178,   61,   61,  164,   61,  165,  166,   61,  172,
       61,  175,   61,   61,  177,   61,  194,  179,  171,   61,
      173,   61,  176,   61,   61,  180,   61,  178,   61,  181,
      195,   61,  611,  620,  122,  172,   61,  175,   61,   61,

      177,  713,  194,  179,  611,   61,  122,  551,  713,   61,
       61,  180,   61,  611,   61,  181,  195,   61,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   55,  200,  183,
      183,  183,  183,  183,  183,   61,   57,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  203,   61,  710,  483,
      122,  611,  472,  472,  200,  183,  183,  183,  183,  183,
      183,  405,   57,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  203,   61,  188,  188,  188,  188,  188,  188,
     1011,   61,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  611,  213,  472,  122,  338,  122,  472,  328,   61,

      188,  188,  188,  188,  188,  188,  189,   61,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  191,  213,  192,
      192,  192,  192,  192,  192,   61,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  544,  192,  192,  192,  192,  192,
      192,  193,  193,  193,  193,  193,  193,  193,  193,  193,
       55,  198,  193,  193,  193,  193,  193,  193,  196,  197,
      199,   61,  258,  472,   61,   61,  201,  204,   61,   61,
       61,   61,  202,  206,  207,  205,  220,  198,  193,  193,
      193,  193,  193,  193,  196,  197,  199,   61,   61,   61,

       61,   61,  201,  204,   61,   61,   61,   61,  202,  206,
      208,  205,  209,  328,  212,  210,   61,  214,   61,   61,
       61,  215,  217,  328,   61,   61,  191,  122,  211,   61,
       61,   61,  216,  218,   61,  219,  208,  226,  209,   61,
      212,  210,   61,  214,   61,   61,   61,  215,  217,   61,
       61,   61,  221,  222,  211,   61,   61,   61,  216,  218,
       61,  219,  223,   61,  328,   61,  232,   61,  224,  225,
       61,   61,  227,  228,  231,   61,   61,   61,  221,  222,
      186,   61,  229,   61,   61,  234,  230,  122,  223,   61,
      233,   61,  232,   61,  235, 1011,   61,   61,  227,  228,

      231,   61,   61,   61,  237,   61,  238,   61,  229,   61,
       61,  234,  230,  236,   61,  240,  233,   61,   61,   61,
      235,  239,  242,  328,   61,  241,   61,   61,   61,   61,
      237,   61,  238,  243,   61,   61,  244,  245,  247,  236,
       61,  246,  186,  248,   61,   61,  266,  239,  242,   61,
       61,  241,   61,   61,   61,   61,   61,   61,   61,  243,
       61,   61,  244,  245,  247,   61,  250,  246,  249,  248,
      274,   61,  266,  269,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,  325, 1011,  270,  297,
      122,   61,  250,  186,  249,  186,  274,   61,  186,  269,

       61,  122,   61,   61,   61,  122,   50,   51,   48,  271,
      116,   61,  251,  251,  251,  251,  251,  251,  251,  251,
      251,   55,   61,  252,  252,  252,  252,  252,  252, 1011,
       57,  259,  259,  259,  259,  259,  259,  259,  259,  259,
       60,   59,   51,   61,   48, 1011,   42,   42,   61,  252,
      252,  252,  252,  252,  252, 1011,   57,  256, 1011,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  258,   61,
      259,  259,  259,  259,  259,  259, 1011,   61,  262,  262,
      262,  262,  262,  262,  262,  262,  262, 1011,  286, 1011,
     1011, 1011, 1011, 1011, 1011,   61,  259,  259,  259,  259,

      259,  259,  189,   61,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  191,  286,  262,  262,  262,  262,  262,
      262,   61,  267,  251,  251,  251,  251,  251,  251,  251,
      251,  251, 1011, 1011, 1011, 1011, 1011, 1011,  285,   61,
      268,  262,  262,  262,  262,  262,  262,  263,  263,  263,
      263,  263,  263,  263,  263,  263,   61,  272,  264,  264,
      264,  264,  264,  264,  285,   61,  268, 1011, 1011, 1011,
     1011, 1011, 1011,   61,  276, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,   61,  272,  264,  264,  264,  264,  264,  264,
      265,  265,  265,  265,  265,  265,  265,  265,  265,   61,

      275,  265,  265,  265,  265,  265,  265,  273,   61,   61,
      277,  278,   61,   61,  282,  280, 1011,  283,   61,   61,
       61, 1011, 1011,  296, 1011, 1011,  275,  265,  265,  265,
      265,  265,  265,  273,   61,   61,  277,  278,   61,   61,
      279,  280,  281,  283,   61,   61,   61,  284,   61,  294,
      287,  302,   61,   61,  288,   61,  295,   61,   61, 1011,
       61, 1011,   61,   61, 1011,  301,  279, 1011,  281,   61,
      298,   61, 1011,  284,   61,  294,  287,  302,   61,   61,
      288,   61,  295,   61,   61,  299,   61,   61,   61,   61,
      289,  301,  300,  290,   61,   61,  298,   61,  303,  291,

      292,  293, 1011,  304,  307,  308,  305, 1011,   61,   61,
      306,  299, 1011,   61,   61, 1011,  289,   61,  300,  290,
       61,   61,   61,   61,  303,  291,  292,  293,  311,  304,
      307,  308,  305,   61,   61,   61,  306,  309,  310,   61,
       61,  312,  313,   61,   61,  314,   61,   61,   61,   61,
      316,  318,   61,  320,  311,  321,  324, 1011,   61,   61,
      315, 1011,   61,  309,  310,   61,   61,  312,  313,   61,
       61,  314,   61,  317,  319,   61,  316,  318,   61,  322,
       61,  321,  355,   61,   61,  323,  315,   61,   61,   61,
       61,   61,   61,  340,   61,   61,   61, 1011, 1011,  317,

      319,   61, 1011, 1011, 1011,  322,   61,   61,  355,   61,
      347,  323, 1011,   61, 1011,   61,   61,   61, 1011,  340,
       61, 1011,   61,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  256,   61,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  258,   61,  331,  331,  331,  331,  331,
      331, 1011, 1011,  331,  331,  331,  331,  331,  331,  331,
      331,  331, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
       61,  331,  331,  331,  331,  331,  331,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  346,   61,  333,  333,
      333,  333,  333,  333,  334,   61,  260,  260,  260,  260,

      260,  260,  260,  260,  260, 1011,  348, 1011, 1011, 1011,
     1011, 1011,  346,   61,  333,  333,  333,  333,  333,  333,
      189,   61,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  191,  370,  336,  336,  336,  336,  336,  336, 1011,
       61,  336,  336,  336,  336,  336,  336,  336,  336,  336,
     1011,   61, 1011, 1011, 1011, 1011, 1011, 1011,  370,  336,
      336,  336,  336,  336,  336,  189,   61,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  338,   61,  339,  339,
      339,  339,  339,  339, 1011, 1011,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  341,  342,   61,   61,  358,

       61,  343,  344,  345,  339,  339,  339,  339,  339,  339,
      351,   61,  349,   61,  352,   61,  353,   61,  350,  354,
      356,  341,  342,   61,   61, 1011,   61,  343,  344,  345,
       61,  357,   61,   61,  359,   61,  351,   61,  349,   61,
      352,   61,  353,   61,  350,  354,  356, 1011,   61,  362,
      360,  361,  368,  363,  364,  365,   61,  357,   61,   61,
       61,   61,   61,   61,   61,   61,  366,  367,   61,  369,
      371,   61,   61,   61,   61,  362,  360,  361,  368,  363,
      364,  365,   61,   61, 1011,  372,   61,  378,   61,   61,
       61,   61,  366,  367,   61,  374,  371,   61,   61,   61,

      373,   61,  375,   61,  376,  377,  383,   61,   61,   61,
      379,  372,   61,  378, 1011, 1011,  380,   61,   61,   61,
       61,  374,   61,  384,   61,  385,  373,   61,  375,   61,
      376,  377,  381,   61,   61,   61,  379,  382,   61,  388,
       61,   61,  380,   61,   61,   61,   61, 1011,   61,  384,
       61,  385,  386,   61,  392,   61,  387,  390,  381,  389,
       61,   61,   61,  382, 1011,  388,   61,   61,   61,  391,
       61,   61,   61,  395,   61,  393,  397, 1011,  386,   61,
      392,   61,  387,  390,  394,  389,   61,  396,   61,  414,
       61,   61, 1011,   61,   61,  391,   61,   61,   61, 1011,

       61,  393,  397,  415,  420,   61,   61,   61, 1011,   61,
      394, 1011,   61,  396, 1011,  414,   61,   61,  401,   61,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  415,
      420,   61,   61,   61,  256,   61,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  258, 1011,  403,  403,  403,
      403,  403,  403, 1011,  446,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  403,  403,  403,  403,  403,  403,  256,
      446,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      405,  447,  406,  406,  406,  406,  406,  406, 1011,  417,

      406,  406,  406,  406,  406,  406,  406,  406,  406, 1011,
     1011,   61, 1011, 1011,  413, 1011, 1011,  447,  406,  406,
      406,  406,  406,  406,  189,  417,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  191,  189,   61,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  338,   61,  410,
      410,  410,  410,  410,  410, 1011, 1011,  410,  410,  410,
      410,  410,  410,  410,  410,  410, 1011, 1011, 1011,  428,
     1011, 1011, 1011, 1011,   61,  410,  410,  410,  410,  410,
      410,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      416,  418,  412,  412,  412,  412,  412,  412,  419,  427,

      421,  426,  425,   61,   61,   61,   61,   61,   61,   61,
      429,   61, 1011,   61,   61, 1011,  416,  418,  412,  412,
      412,  412,  412,  412,  419,  427,  421,  426,  425,   61,
       61,   61,   61,   61,   61,   61,  429,   61,  431,   61,
       61,  422,  422,  430,  422,  422,  422,  422,  422,  422,
      423,   61,  422,  432,  436,   61, 1011,  433,   61,  434,
      437,   61,  422,  422,  431,   61,  435,   61,   61,  430,
      439,   61,  440,  438,   61, 1011,  443,   61,  441,  432,
      436,   61,   61,  433,   61,  434,  437,   61,   61,  457,
       61,   61,  435,   61,   61,   61,  439,   61,  440,  438,

       61,  442,  443,   61,  441,  444,  445,  448,   61,   61,
      449,   61,   61,   61,   61,   61,   61,  450, 1011,  453,
       61,   61,  451,   61,   61,  458,  452,  442,   61,   61,
       61,  444,  445,  448, 1011,   61,  449,   61,   61,   61,
       61,   61,  454,  450,  456,  453,   61,  461,  451,   61,
       61,   61,  452,  459,   61,  455,   61,  460,   61,   61,
       61,   61,   61,   61,  462,  463,   61,   61,  454,  464,
      456,  465,   61,  461,  467,   61,   61,   61, 1011,  459,
      468,  455, 1011,  460,   61,   61,   61,   61,   61,   61,
      462,  463,   61,   61,  466,  464,  485,  465,   61,  486,

       61,   61,   61,   61,  490,  487,  468, 1011,   61,  473,
      473,  473,  473,  473,  473,  473,  473,  473,   61, 1011,
      466, 1011,  485,  489, 1011,  486,   61, 1011, 1011,   61,
      490,  487, 1011,  256,   61,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  258,  256, 1011,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  405,   61,  476,  476,
      476,  476,  476,  476, 1011, 1011,  476,  476,  476,  476,
      476,  476,  476,  476,  476, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,  496,   61,  476,  476,  476,  476,  476,  476,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  492,

       61,  478,  478,  478,  478,  478,  478,  479,  496,  407,
      407,  407,  407,  407,  407,  407,  407,  407, 1011,   61,
     1011, 1011, 1011, 1011, 1011,  492,   61,  478,  478,  478,
      478,  478,  478,  189, 1011,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  189,   61,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  338,  501,  481,  481,  481,
      481,  481,  481, 1011,   61,  481,  481,  481,  481,  481,
      481,  481,  481,  481, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,  501,  481,  481,  481,  481,  481,  481,  189,
       61,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      483,  493,  484,  484,  484,  484,  484,  484, 1011,  491,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  488,
      495,   61,   61,  522,   61,  494, 1011,  493,  484,  484,
      484,  484,  484,  484,  497,  491,  500,   61,   61,  499,
       61, 1011,   61, 1011,  498,  488,  495,   61,   61,  522,
       61,  494,   61,  499,   61,  505,  506, 1011, 1011,  510,
      497,  502,  500,   61,   61,  499,   61,  503,   61,  504,
      498,  508,   61,  511,   61,   61,  507,   61,   61,  499,
       61,  505,  506,   61,  509,  510,  514,  502,  512,   61,
      523,  513,   61,  503, 1011,  504, 1011,  508,   61,  511,

       61,   61,  507,   61,   61,  516,   61,   61,  517,   61,
      509,  518,  514,  519,  512,   61,  523,  513,   61,  515,
       61,   61,  520,  524,   61,   61,   61,   61,   61, 1011,
       61,  516,   61,   61,  517,  521,  527,  518,   61,  519,
       61,   61,  525,   61, 1011,  515,   61,   61,  520,  524,
       61,   61,   61,   61,   61,   61,  526,  528,   61,  531,
      529,  521,  527, 1011,   61,  532,   61,   61,  525,   61,
      530,   61,  533,  535, 1011,   61,  534,   61,   61,  536,
       61,   61,  526,  528,   61,  531,  529,  537,   61,   61,
       61,  532,  539,   61,   61, 1011,  530,   61,  533,  535,

      538,   61,  534,   61,   61,  536,   61,   61,  543,  541,
      540,   61,  563,  537,   61,   61,   61,   61,  539,   61,
       61,   61,  542, 1011,   61, 1011,  538, 1011, 1011, 1011,
     1011, 1011, 1011,   61,  543,  541,  540,   61, 1011, 1011,
     1011, 1011, 1011,   61, 1011, 1011,   61,   61,  542,  547,
       61,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      256, 1011,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  256,   61,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  405, 1011,  549,  549,  549,  549,  549,  549,
     1011,  569,  549,  549,  549,  549,  549,  549,  549,  549,

      549,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      549,  549,  549,  549,  549,  549,  256,  569,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  551,  561,  552,
      552,  552,  552,  552,  552, 1011,   61,  552,  552,  552,
      552,  552,  552,  552,  552,  552, 1011, 1011,   61, 1011,
     1011, 1011, 1011, 1011,  561,  552,  552,  552,  552,  552,
      552,  189,   61,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  338,  189,   61,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  483, 1011,  555,  555,  555,  555,
      555,  555, 1011, 1011,  555,  555,  555,  555,  555,  555,

      555,  555,  555, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011,  558,  555,  555,  555,  555,  555,  555,  556,  556,
      556,  556,  556,  556,  556,  556,  556,   61,  559,  557,
      557,  557,  557,  557,  557,   61,  560,  558,  562, 1011,
      566,   61,   61,   61, 1011,   61,  567,   61,  568,  564,
      565, 1011, 1011,   61,  559,  557,  557,  557,  557,  557,
      557,   61,  560,   61,  562,   61,  566,   61,   61,   61,
      570,   61,  567,   61,  568,  564,  565,  571,  572,   61,
      573,   61,  574,  578,  575,  581,  577,  576,  580,   61,
       61,   61,   61,   61,   61,   61,  570,   61,   61,   61,

      583,  584,   61,  571,  572,   61,  573,   61,  574,  578,
      575,  581,  577,  576,  580,  579,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,  584,   61,  582,
       61,  586,  585,  587,   61,   61,   61,   61,   61,   61,
      589,  579,   61,   61,  588,  590,   61,  595,   61,   61,
     1011,   61,   61, 1011, 1011,  582,   61,  586,  585,  587,
       61,   61,   61,   61,   61,   61,  589,  591,   61,  592,
      588,  590,   61,  593,  594,   61,  596,   61,  598,   61,
      597,   61,  599, 1011,  600,   61,   61,   61, 1011,   61,
      603,   61,   61,  591,   61,  592, 1011,   61,  602,  593,

      594,   61,  596,   61,  598,   61,  597,   61,  599,  601,
      600,   61,   61,   61,   61,   61,  603,   61,   61,  604,
       61,   61,  605,   61,  602,  607,  606,   61,  623,   61,
       61,  625,  633,   61,  649,  601,   61,   61,   61,   61,
       61,   61, 1011, 1011, 1011,  604, 1011,   61,  605, 1011,
     1011,  607,  606, 1011,  623, 1011,   61,  625,  633,   61,
      649, 1011,   61,   61,   61,   61, 1011,   61,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  256, 1011,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  405,  256,
     1011,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      551, 1011,  614,  614,  614,  614,  614,  614, 1011, 1011,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  614,  614,
      614,  614,  614,  614,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  622,  647,  616,  616,  616,  616,  616,
      616, 1011,   61,  618,  618,  618,  618,  618,  618,  618,
      618,  618, 1011,   61, 1011, 1011, 1011, 1011, 1011,  622,
      647,  616,  616,  616,  616,  616,  616,  189,   61,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  483,   61,
      618,  618,  618,  618,  618,  618, 1011,   61,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  618,  618,  618,  618,
      618,  618,  189,   61,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  620,  624,  621,  621,  621,  621,  621,
      621,  626,  627,  629,   61,  628,   61,  632, 1011,   61,
     1011,   61, 1011,   61, 1011, 1011,  634,  630,  631,  644,
      624,  621,  621,  621,  621,  621,  621,  626,  627,  629,
       61,  628,   61,   61,   61,   61,   61,   61,  639,   61,
      636,   61,  634,  630,  631,   61,  637,   61,  635,  638,
      640,  642,   61,   61,   61,   61,  646,   61,   61,   61,

       61,   61,   61,  648,  639,  641,  636,   61,  643,   61,
      645,   61,  637,   61,  635,  638,  640,  642,   61,   61,
       61,   61,  651,   61,   61,   61,   61,   61,  652,  650,
       61,  641,   61,  653,  643,   61,  645,   61,  654,  655,
       61,   61,   61,   61,  656,  657,  658,   61,  651,  659,
      660,   61,   61,   61,  652,  650,   61,   61,   61,  653,
       61,   61,   61,   61,  654,  655,   61,   61,   61,   61,
      656,  657,   61,   61,  661,  659,  660,   61,  663,   61,
       61,   61,  662,   61,  679,   61,   61,   61,   61,  664,
      677,   61,   61, 1011,   61, 1011, 1011, 1011,   61, 1011,

      661, 1011, 1011,   61,  663,   61,   61,   61,  662, 1011,
      679,   61, 1011, 1011, 1011,  664,  677,   61,   61, 1011,
       61,  669,  669,  669,  669,  669,  669,  669,  669,  669,
     1011,   61,  256, 1011,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  551,   61,  669,  669,  669,  669,  669,
      669, 1011,  687,  672,  672,  672,  672,  672,  672,  672,
      672,  672, 1011,  689, 1011, 1011, 1011, 1011, 1011, 1011,
       61,  669,  669,  669,  669,  669,  669,  256,  687,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  671,  692,
      672,  672,  672,  672,  672,  672,  189,   61,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  483,   61, 1011,
     1011, 1011, 1011, 1011, 1011,  692,  672,  672,  672,  672,
      672,  672,  189,   61,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  620,   61,  674,  674,  674,  674,  674,
      674, 1011, 1011,  674,  674,  674,  674,  674,  674,  674,
      674,  674, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
      682,  674,  674,  674,  674,  674,  674,  675,  675,  675,
      675,  675,  675,  675,  675,  675,   61,  684,  676,  676,
      676,  676,  676,  676,   61,  680,  682,   61,  678,  681,
      686,   61,  685,  688,   61,   61,   61, 1011, 1011,   61,

      683, 1011,   61,  684,  676,  676,  676,  676,  676,  676,
       61,  680,   61,   61,  678,  681,  686,   61,  685,  688,
       61,   61,   61,  690,  691,   61,  683,  693,  694,  695,
       61,  696,  697,  699,  698,  700,   61,  702,   61,   61,
       61,   61,   61,   61,   61,   61,  703,   61,  701,  690,
      691,   61,   61,  693,  694,  695,   61,  696,  697,  699,
      698,  700,   61,  702,   61,   61,   61,   61,   61,   61,
       61,   61,  703,   61,  701,   61,   61,   61,   61,   61,
      704,   61,  705,  706,  707,   61,   61,  708,   61, 1011,
       61,   61,   61,   61,   61,   61,   61,  709,  728, 1011,

       61,   61,   61, 1011, 1011,   61,  704,   61,  705,  706,
      707,   61,   61,  708,   61,   61, 1011,   61,   61,   61,
       61,   61,   61,  709,  728,  256,   61,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  551, 1011, 1011, 1011,
     1011,   61,  256, 1011,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  671,  730,  715,  715,  715,  715,  715,
      715, 1011, 1011,  715,  715,  715,  715,  715,  715,  715,
      715,  715, 1011, 1011, 1011, 1011, 1011, 1011, 1011,   61,
      730,  715,  715,  715,  715,  715,  715,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  725,   61,  717,  717,

      717,  717,  717,  717, 1011,   61,  719,  719,  719,  719,
      719,  719,  719,  719,  719, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,  725,   61,  717,  717,  717,  717,  717,  717,
      189, 1011,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  620,  727,  719,  719,  719,  719,  719,  719, 1011,
       61,  722,  722,  722,  722,  722,  722,  722,  722,  722,
     1011, 1011, 1011, 1011, 1011, 1011, 1011,  736,  727,  719,
      719,  719,  719,  719,  719,  189,   61,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  721,  723,  722,  722,
      722,  722,  722,  722,  724,  726,  729,  731,  732,   61,

       61,   61,   61,   61,  733,  734, 1011,   61,  735,   61,
       61,   61,   61,  723,  722,  722,  722,  722,  722,  722,
      724,  726,  729,  731,  732,   61,   61,   61,   61,   61,
      733,  734,  737,   61,  735,   61,   61,   61,   61,   61,
      738,  740,  739,  741,  742,   61,   61,  743,  746,   61,
     1011,  744,  745,   61,   61,   61,  761,   61,  737,   61,
       61,   61,   61,   61,  747,   61,  738,  740,  739,  741,
      742,   61,   61,  743,  746,   61,   61,  744,  745,   61,
       61,   61,  761,   61, 1011,   61,   61,   61,   61,   61,
      747, 1011, 1011,  752,  752,  752,  752,  752,  752,  752,

      752,  752,   61,  256, 1011,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  671,   61,  752,  752,  752,  752,
      752,  752, 1011,   61,  755,  755,  755,  755,  755,  755,
      755,  755,  755, 1011,  765, 1011, 1011, 1011, 1011, 1011,
     1011,   61,  752,  752,  752,  752,  752,  752,  256,   61,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  754,
      765,  755,  755,  755,  755,  755,  755,  189,   61,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  620,   61,
     1011, 1011, 1011, 1011, 1011, 1011, 1011,  755,  755,  755,
      755,  755,  755,  189,   61,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  721,   61,  757,  757,  757,  757,
      757,  757, 1011, 1011,  757,  757,  757,  757,  757,  757,
      757,  757,  757, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
       61,  762,  757,  757,  757,  757,  757,  757,  758,  758,
      758,  758,  758,  758,  758,  758,  758,   61,  763,  759,
      759,  759,  759,  759,  759,  760,   61,  762,  767,   61,
      768,   61,  764,   61,   61, 1011,  774,  766, 1011,   61,
     1011, 1011,  772,   61,  763,  759,  759,  759,  759,  759,
      759,  760,   61,   61,  767,   61,  768,   61,  764,   61,
       61,  769,   61,  766,  771,   61,  773,  770,  772,   61,

       61,  776,   61,  775,  777,   61,  778,  792,   61,   61,
       61,   61,   61,  795,   61,   61,   61,  769,   61,   61,
      771, 1011,  773,  770, 1011,   61,   61,  776,   61,  775,
      777,   61,  778,  792,  798, 1011,   61,   61,   61,  795,
       61,   61,   61, 1011,  256,   61,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  671,  256, 1011,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  754,   61,  784,
      784,  784,  784,  784,  784, 1011, 1011,  784,  784,  784,
      784,  784,  784,  784,  784,  784, 1011, 1011, 1011, 1011,
     1011, 1011, 1011,   61,   61,  784,  784,  784,  784,  784,

      784,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      797,   61,  786,  786,  786,  786,  786,  786, 1011,   61,
      788,  788,  788,  788,  788,  788,  788,  788,  788, 1011,
       61, 1011, 1011, 1011, 1011, 1011,  797,   61,  786,  786,
      786,  786,  786,  786,  189, 1011,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  721,   61,  788,  788,  788,
      788,  788,  788, 1011,   61,  791,  791,  791,  791,  791,
      791,  791,  791,  791, 1011,  793, 1011, 1011, 1011, 1011,
     1011, 1011,   61,  788,  788,  788,  788,  788,  788,  189,
       61,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      790,  793,  791,  791,  791,  791,  791,  791,   61,  794,
      799,  800,   61,  801,  803,  802,   61,   61,  804,   61,
       61, 1011, 1011,  806,   61,   61, 1011,   61,  791,  791,
      791,  791,  791,  791, 1011,  794,  799,  800,   61,  801,
      803,  802,   61,   61,  804,   61,   61,  805,  807,  806,
       61,   61, 1011,   61,  813,  813,  813,  813,  813,  813,
      813,  813,  813,   61,   61, 1011,   61, 1011, 1011,  822,
     1011, 1011, 1011,  805,  807, 1011, 1011,  816,  816,  816,
      816,  816,  816,  816,  816,  816, 1011, 1011, 1011,   61,
       61,  256,   61,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  754,   61,  813,  813,  813,  813,  813,  813,
      189,   61,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  721,  830, 1011, 1011, 1011, 1011, 1011, 1011,   61,
      813,  813,  813,  813,  813,  813,  256,   61,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  815,   61,  816,
      816,  816,  816,  816,  816, 1011,  854,  818,  818,  818,
      818,  818,  818,  818,  818,  818, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011,   61,  816,  816,  816,  816,  816,
      816,  189,  854,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  790,  821,  818,  818,  818,  818,  818,  818,

     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,   61,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  821,
      818,  818,  818,  818,  818,  818,  819,  819,  819,  819,
      819,  819,  819,  819,  819,   61,  824,  820,  820,  820,
      820,  820,  820,   61,  825,  832,  827,  823,   61, 1011,
      853, 1011,   61, 1011,  834, 1011,  831,   61, 1011,  828,
      826,   61,  824,  820,  820,  820,  820,  820,  820,   61,
      825,  832,  827,  823,   61,  829,   61,   61,   61,  833,
      834,  835,  831,   61,   61,  828,  826,   61,  836,   61,
      855,   61,   61,   61, 1011,   61, 1011, 1011, 1011, 1011,

     1011,  829,   61,   61, 1011,  833, 1011,  835, 1011, 1011,
       61, 1011, 1011, 1011,  836,   61,  855,   61,   61,   61,
      256,   61,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  754,  256, 1011,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  815,  884,  843,  843,  843,  843,  843,
      843, 1011, 1011,  847,  847,  847,  847,  847,  847,  847,
      847,  847, 1011, 1011, 1011, 1011, 1011, 1011, 1011,  864,
      884,  843,  843,  843,  843,  843,  843,  844,  844,  844,
      844,  844,  844,  844,  844,  844,   61,  885,  845,  845,
      845,  845,  845,  845, 1011,  864,  850,  850,  850,  850,

      850,  850,  850,  850,  850, 1011,  852, 1011, 1011, 1011,
     1011, 1011,   61,  885,  845,  845,  845,  845,  845,  845,
      189,   61,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  790,  852,  847,  847,  847,  847,  847,  847, 1011,
       61, 1011, 1011, 1011, 1011, 1011, 1011,   61,  873,  873,
      873,  873,  873,  873,  873,  873,  873, 1011, 1011,  847,
      847,  847,  847,  847,  847,  189,   61,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  849,  856,  850,  850,
      850,  850,  850,  850,  851,  857,  858,   61,  859,  860,
      861,   61,  862,   61,   61,  863,  888,   61,   61,  889,

     1011, 1011, 1011,  856,  850,  850,  850,  850,  850,  850,
      851,  857,  858,   61,  865,  866,   61,   61,   61,   61,
       61,  863,   61,   61,   61,   61, 1011,   61,  875,  875,
      875,  875,  875,  875,  875,  875,  875, 1011, 1011, 1011,
      865,  866,   61,  890,   61, 1011, 1011, 1011,   61, 1011,
     1011,   61, 1011,   61,  256,  891,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  815,   61,  873,  873,  873,
      873,  873,  873,  189,  910,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  790,   61, 1011, 1011, 1011, 1011,
     1011, 1011,   61,  873,  873,  873,  873,  873,  873,  256,

      910,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      886,   61,  875,  875,  875,  875,  875,  875, 1011,  911,
      877,  877,  877,  877,  877,  877,  877,  877,  877, 1011,
       61, 1011, 1011, 1011, 1011, 1011,  886, 1011,  875,  875,
      875,  875,  875,  875,  189,  911,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  849,   61,  877,  877,  877,
      877,  877,  877,   61,  880, 1011,  887,  879,   61,  892,
     1011,   61, 1011, 1011,  917, 1011,  912, 1011,   61,  881,
      893,   61,   61,  877,  877,  877,  877,  877,  877,   61,
      880,  882,  887,  879,   61,  892,   61,   61,  883,   61,

      894,  895,  912,   61,   61,  881,  893,   61,   61,   61,
       61,  905,  914,  915,  932, 1011,   61,  882, 1011, 1011,
     1011, 1011,   61, 1011,  883,   61,  894,  895,   61,   61,
     1011, 1011, 1011, 1011, 1011,   61,   61,  905,   61,   61,
      932,  256,   61,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  815,  256,   61,  900,  900,  900,  900,  900,
      900,  900,  900,  900,   61,   61,  901,  901,  901,  901,
      901,  901, 1011,   61,  901,  901,  901,  901,  901,  901,
      901,  901,  901, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,  901,  901,  901,  901,  901,  901,  189,   61,

      902,  902,  902,  902,  902,  902,  902,  902,  902,  849,
      906,  903,  903,  903,  903,  903,  903, 1011,  916,  903,
      903,  903,  903,  903,  903,  903,  903,  903,   61,  907,
      913,  918,   61,   61,   61,  919,  906,  903,  903,  903,
      903,  903,  903,   61,  908,   61,  927,  930,   61,   61,
      909,   61,   61,   61,   61,  907,  913,  918,   61,   61,
       61,  919,   61, 1011,   61, 1011, 1011, 1011, 1011,   61,
      908,   61,  927,  930,   61,   61,  909,   61,   61,   61,
     1011, 1011, 1011,  928, 1011, 1011, 1011, 1011,   61,  256,
       61,  924,  924,  924,  924,  924,  924,  924,  924,  924,

       61,   61,  925,  925,  925,  925,  925,  925, 1011,  928,
      925,  925,  925,  925,  925,  925,  925,  925,  925, 1011,
       61, 1011,  934,  929,   61,   61,   61,   61,  925,  925,
      925,  925,  925,  925,  189,  941,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  849,   61,  931,  934,  929,
       61,   61,  940,  933,  933,   61,  933,  933,  933,  933,
      933,  933,  942, 1011,  933,  960, 1011,  961,   61,   61,
     1011,  945,  946,  931,  933,  933,  943, 1011,  940, 1011,
      256,   61,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  960,   61,  961,   61,   61,   61,  945,  946, 1011,

      948,  949,  943,  944,  944,  955,  944,  944,  944,  944,
      944,  944,  964,  957,  944,  954,  956,   61,   61,   61,
       61,   61,   61,   61,  944,  944,  948,  949,  958,  959,
      965,  955,   61,  962,  963,  969,   61,   61,  964,  957,
      972,  954,  956,   61, 1011,   61,   61,   61,  973,   61,
       61,  970,  974,  975,  958,  959,  965,   61,   61,  962,
      963,  969,   61,   61,  971,  976,  972,   61,  977,   61,
       61,  978,   61,  983,  973,   61,   61,  970,  974,  975,
       61,  984,  986,   61,   61,   61,  985,   61,  987,   61,
      971,  976,   61,   61,  977,   61,   61,  978,   61,  983,

      989,   61,  988,   61,  994,   61,   61,  984,  986,  993,
       61,   61,  985,   61,  987,   61,   61,  995,   61,  996,
       61,   61, 1001,   61,   61,   61,  989,   61,  988,   61,
      994,   61, 1011, 1011, 1011,  993, 1011, 1011, 1011,   61,
     1011, 1011,   61,  995, 1011,  996,   61,   61, 1001,   61,
       61,   61, 1011,   61, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011,   61,   41,   41,   41,   41,
       43,   43,   43,   43,   47,   47,   47,   47,   49, 1011,
       49,   49,   50,   50,   50,   50,  117, 1011,  117,  117,
      121,  121,  184,  184,  185,  185,  253,  253,  254,  254,

      255,  255,  326,  326,  327,  327,  398,  398,  399,  399,
      400,  400,  424, 1011,  424,  424,  469,  469,  470,  470,
      471,  471,  545,  545,  546,  546,  608,  608,  609,  609,
      610,  610,  665,  665,  666,  666,  667,  667,  545,  545,
      711,  711,  712,  712,  748,  748,  749,  749,  750,  750,
      779,  779,  780,  780,  781,  781,  666,  666,  809,  809,
      810,  810,  837,  837,  838,  838,  839,  839,  867,  867,
      868,  868,  870,  870,  749,  749,  897,  897,  898,  898,
      920,  920,  921,  921,  922,  922,  933, 1011,  933,  933,
      935, 1011,  935,  935,  936,  936,  937,  937,  944, 1011,

      944,  944,  947, 1011,  947,  947,  809,  809,  951,  951,
      952,  952,  966,  966,  967,  967,  979,  979,  980,  980,
      981,  981,  868,  868,  991,  991,  997,  997,  998,  998,
      999,  999, 1003, 1003, 1006, 1006, 1007, 1007, 1009, 1009,
     1010, 1010,    7, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011
    } ;

static yyconst flex_int16_t yy_chk[5919] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1100,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1096,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1094,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1090,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1084,   39,   32, 1076,
       21, 1075,   21,   39,   46,   46, 1070,   65, 1066,   21,
     1065,   25, 1061, 1057, 1019, 1010,   40,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
     1009,   66,   40,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   40,   69,   69,   67,   29,   22,   25,   22,
       22,   25, 1007,   25,   67, 1006,   22,   66,   40, 1005,
       29, 1004,   22, 1003,   22,   22,   29,   22, 1002,   69,
       69,   67,   29,   22,   31,   22,   22,  999,   31,   70,

       67,   33,   22,   23,   31,   68,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   75,   68,   23,   31,   70,  998,   33,  992,   23,
       31,   68,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  991,   75,   68,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       81,   26,   26,   26,   26,   26,   26,  990,   26,   91,
       79,  981,   26,  980,  979,   26,  968,  967,   73,   34,
       38,   26,   79,   34,   38,   73,   81,   26,   26,   26,
       26,   26,   26,   34,   26,   91,   79,   35,   26,   34,

       38,   26,   35,   35,   73,   34,   38,   26,   79,   34,
       38,   73,   36,   36,   35,   35,  966,   76,   77,   34,
       77,   83,   36,   35,   78,   34,   38,  952,   35,   35,
       36,   76,   78,   80,   88,   88,   82,   83,   80,   36,
       35,   35,   36,   76,   77,  951,   77,   83,   36,  950,
       78,  938,  937,   82,  936,  922,   36,   76,   78,   80,
       88,   88,   82,   83,   80,   36,  921,  920,   36,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   82,
       54,   54,   54,   54,   54,   54,  903,   54,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   86,   94,  899,

      898,  897,  896,  873,  870,  100,   54,   54,   54,   54,
       54,   54,   86,   54,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   86,   94,   59,   59,   59,   59,   59,
       59,  100,  868,  867,  847,  841,  840,  839,   86,  838,
      837,  813,  810,  809,  808,  788,  782,   95,   90,  781,
       90,   59,   59,   59,   59,   59,   59,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   84,   62,   62,
       62,   62,   62,   62,   90,   62,   90,  780,  779,  765,
       92,   95,   72,  752,   85,   92,   87,   84,   62,   85,
       72,  750,  749,   84,   62,   62,   62,   62,   62,   62,

       87,   62,   72,   85,   85,   89,   92,   95,   72,   97,
       85,   92,   87,   84,   62,   85,   72,   89,   93,   93,
       89,   96,  102,  108,  106,   97,   87,   96,   72,   85,
       85,   89,   98,  101,  103,   97,  101,   98,   99,  103,
       99,   99,  102,   89,   93,   93,   89,   96,  102,   99,
      106,   97,  104,   96,  105,  107,  110,  108,   98,  101,
      103,  112,  101,   98,   99,  103,   99,   99,  102,  104,
      112,  109,  104,  105,  111,   99,  127,  113,  104,  109,
      105,  107,  110,  108,  113,  114,  111,  112,  114,  115,
      128,  115,  748,  719,  713,  104,  112,  109,  104,  105,

      111,  712,  127,  113,  711,  109,  710,  669,  667,  131,
      113,  114,  111,  666,  114,  115,  128,  115,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  134,  118,
      118,  118,  118,  118,  118,  131,  118,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  137,  137,  665,  618,
      611,  610,  609,  608,  134,  118,  118,  118,  118,  118,
      118,  549,  118,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  137,  137,  122,  122,  122,  122,  122,  122,
      125,  181,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  546,  146,  545,  544,  481,  472,  471,  470,  146,

      122,  122,  122,  122,  122,  122,  124,  181,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  146,  124,
      124,  124,  124,  124,  124,  146,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  469,  124,  124,  124,  124,  124,
      124,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  132,  126,  126,  126,  126,  126,  126,  129,  130,
      133,  129,  403,  400,  132,  130,  135,  138,  135,  138,
      133,  139,  136,  140,  141,  139,  153,  132,  126,  126,
      126,  126,  126,  126,  129,  130,  133,  129,  136,  140,

      132,  130,  135,  138,  135,  138,  133,  139,  136,  140,
      142,  139,  143,  399,  145,  144,  145,  147,  141,  147,
      153,  148,  150,  398,  136,  140,  336,  328,  144,  143,
      142,  144,  149,  151,  150,  152,  142,  158,  143,  148,
      145,  144,  145,  147,  141,  147,  153,  148,  150,  151,
      149,  152,  154,  155,  144,  143,  142,  144,  149,  151,
      150,  152,  156,  156,  327,  148,  162,  155,  157,  157,
      154,  158,  159,  160,  161,  151,  149,  152,  154,  155,
      326,  162,  160,  161,  159,  164,  160,  325,  156,  156,
      163,  160,  162,  155,  165,  265,  154,  158,  159,  160,

      161,  164,  163,  157,  167,  167,  168,  162,  160,  161,
      159,  164,  160,  166,  165,  170,  163,  160,  168,  166,
      165,  169,  172,  255,  169,  171,  171,  164,  163,  157,
      167,  167,  168,  173,  172,  173,  174,  175,  177,  166,
      165,  176,  254,  178,  168,  166,  194,  169,  172,  170,
      169,  171,  171,  175,  174,  178,  177,  176,  196,  173,
      172,  173,  174,  175,  177,  205,  180,  176,  179,  178,
      202,  197,  194,  197,  209,  170,  180,  202,  211,  175,
      174,  178,  177,  176,  196,  179,  253,  252,  198,  224,
      186,  205,  180,  185,  179,  184,  202,  197,  121,  197,

      209,  119,  180,  202,  211,   55,   51,   50,   47,  199,
       42,  179,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  198,  182,  182,  182,  182,  182,  182,  188,
      182,  188,  188,  188,  188,  188,  188,  188,  188,  188,
       19,   18,   14,  199,   12,    7,    4,    3,  198,  182,
      182,  182,  182,  182,  182,    0,  182,  187,    0,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  199,
      187,  187,  187,  187,  187,  187,  192,  231,  192,  192,
      192,  192,  192,  192,  192,  192,  192,    0,  217,    0,
        0,    0,    0,    0,    0,  217,  187,  187,  187,  187,

      187,  187,  190,  231,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  217,  190,  190,  190,  190,  190,
      190,  217,  195,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,    0,    0,    0,    0,    0,  216,  216,
      195,  190,  190,  190,  190,  190,  190,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  195,  200,  191,  191,
      191,  191,  191,  191,  216,  216,  195,    0,    0,    0,
        0,    0,    0,  200,  204,    0,    0,    0,    0,    0,
        0,    0,  195,  200,  191,  191,  191,  191,  191,  191,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  200,

      203,  193,  193,  193,  193,  193,  193,  201,  204,  201,
      206,  207,  206,  207,  213,  210,    0,  214,  210,  214,
      203,    0,    0,  223,    0,    0,  203,  193,  193,  193,
      193,  193,  193,  201,  204,  201,  206,  207,  206,  207,
      208,  210,  212,  214,  210,  214,  203,  215,  213,  221,
      218,  228,  208,  218,  219,  219,  222,  223,  212,    0,
      228,    0,  221,  215,    0,  227,  208,    0,  212,  222,
      225,  227,    0,  215,  213,  221,  218,  228,  208,  218,
      219,  219,  222,  223,  212,  225,  228,  225,  221,  215,
      220,  227,  226,  220,  226,  222,  225,  227,  229,  220,

      220,  220,    0,  230,  233,  234,  232,    0,  220,  230,
      232,  225,    0,  225,  229,    0,  220,  246,  226,  220,
      226,  233,  232,  234,  229,  220,  220,  220,  237,  230,
      233,  234,  232,  235,  220,  230,  232,  235,  236,  236,
      229,  238,  239,  246,  237,  240,  238,  233,  232,  234,
      241,  243,  243,  245,  237,  247,  250,    0,  239,  235,
      240,    0,  240,  235,  236,  236,  241,  238,  239,  269,
      237,  240,  238,  242,  244,  247,  241,  243,  243,  248,
      242,  247,  279,  244,  239,  249,  240,  245,  240,  279,
      250,  249,  241,  266,  266,  269,  248,    0,    0,  242,

      244,  247,    0,    0,    0,  248,  242,  281,  279,  244,
      272,  249,    0,  245,    0,  279,  250,  249,    0,  266,
      266,    0,  248,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  257,  281,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  272,  257,  257,  257,  257,  257,
      257,  259,    0,  259,  259,  259,  259,  259,  259,  259,
      259,  259,    0,    0,    0,    0,    0,    0,    0,    0,
      272,  257,  257,  257,  257,  257,  257,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  271,  309,  258,  258,
      258,  258,  258,  258,  260,  271,  260,  260,  260,  260,

      260,  260,  260,  260,  260,    0,  273,    0,    0,    0,
        0,    0,  271,  309,  258,  258,  258,  258,  258,  258,
      261,  271,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  295,  261,  261,  261,  261,  261,  261,  262,
      273,  262,  262,  262,  262,  262,  262,  262,  262,  262,
        0,  295,    0,    0,    0,    0,    0,    0,  295,  261,
      261,  261,  261,  261,  261,  263,  273,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  295,  263,  263,
      263,  263,  263,  263,  264,    0,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  267,  268,  311,  268,  283,

      267,  270,  270,  270,  263,  263,  263,  263,  263,  263,
      276,  270,  274,  274,  276,  276,  277,  277,  275,  278,
      280,  267,  268,  311,  268,    0,  267,  270,  270,  270,
      275,  282,  280,  283,  284,  278,  276,  270,  274,  274,
      276,  276,  277,  277,  275,  278,  280,    0,  282,  287,
      285,  286,  293,  288,  289,  290,  275,  282,  280,  283,
      289,  278,  285,  286,  287,  288,  291,  292,  284,  294,
      296,  290,  293,  292,  282,  287,  285,  286,  293,  288,
      289,  290,  291,  296,    0,  297,  289,  302,  285,  286,
      287,  288,  291,  292,  284,  298,  296,  290,  293,  292,

      297,  298,  299,  294,  300,  301,  307,  302,  291,  296,
      303,  297,  301,  302,    0,    0,  304,  303,  299,  313,
      300,  298,  304,  308,  308,  310,  297,  298,  299,  294,
      300,  301,  305,  302,  306,  305,  303,  306,  301,  315,
      307,  310,  304,  303,  299,  313,  300,    0,  304,  308,
      308,  310,  312,  312,  319,  315,  314,  317,  305,  316,
      306,  305,  314,  306,    0,  315,  307,  310,  316,  318,
      320,  317,  318,  322,  319,  320,  324,    0,  312,  312,
      319,  315,  314,  317,  321,  316,  321,  323,  314,  341,
      323,  355,    0,  324,  316,  318,  320,  317,  318,    0,

      319,  320,  324,  342,  347,  342,  347,  322,    0,  341,
      321,    0,  321,  323,    0,  341,  323,  355,  329,  324,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  342,
      347,  342,  347,  322,  330,  341,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,    0,  330,  330,  330,
      330,  330,  330,  331,  372,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  330,  330,  330,  330,  330,  330,  332,
      372,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  373,  332,  332,  332,  332,  332,  332,  333,  344,

      333,  333,  333,  333,  333,  333,  333,  333,  333,    0,
        0,  344,    0,    0,  340,    0,    0,  373,  332,  332,
      332,  332,  332,  332,  335,  344,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  337,  344,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  340,  337,
      337,  337,  337,  337,  337,  339,    0,  339,  339,  339,
      339,  339,  339,  339,  339,  339,    0,    0,    0,  353,
        0,    0,    0,    0,  340,  337,  337,  337,  337,  337,
      337,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      343,  345,  338,  338,  338,  338,  338,  338,  346,  352,

      348,  351,  350,  353,  351,  377,  343,  345,  348,  350,
      354,  352,    0,  354,  346,    0,  343,  345,  338,  338,
      338,  338,  338,  338,  346,  352,  348,  351,  350,  353,
      351,  377,  343,  345,  348,  350,  354,  352,  357,  354,
      346,  349,  349,  356,  349,  349,  349,  349,  349,  349,
      349,  356,  349,  358,  362,  357,    0,  359,  360,  360,
      363,  358,  349,  349,  357,  359,  361,  361,  363,  356,
      365,  366,  366,  364,  362,    0,  369,  356,  367,  358,
      362,  357,  364,  359,  360,  360,  363,  358,  369,  384,
      365,  359,  361,  361,  363,  367,  365,  366,  366,  364,

      362,  368,  369,  382,  367,  370,  371,  374,  364,  368,
      375,  370,  371,  375,  369,  374,  365,  376,    0,  380,
      376,  367,  378,  384,  378,  385,  379,  368,  380,  382,
      386,  370,  371,  374,    0,  368,  375,  370,  371,  375,
      379,  374,  381,  376,  383,  380,  376,  389,  378,  384,
      378,  390,  379,  387,  380,  381,  386,  388,  381,  385,
      388,  387,  383,  389,  391,  392,  379,  392,  381,  393,
      383,  394,  394,  389,  396,  393,  391,  390,    0,  387,
      397,  381,    0,  388,  381,  385,  388,  387,  383,  389,
      391,  392,  397,  392,  395,  393,  413,  394,  394,  413,

      416,  393,  391,  395,  416,  413,  397,    0,  396,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  397,    0,
      395,    0,  413,  415,    0,  413,  416,    0,    0,  395,
      416,  413,    0,  402,  396,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  404,    0,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  415,  404,  404,
      404,  404,  404,  404,  406,    0,  406,  406,  406,  406,
      406,  406,  406,  406,  406,    0,    0,    0,    0,    0,
        0,    0,  422,  415,  404,  404,  404,  404,  404,  404,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  418,

      418,  405,  405,  405,  405,  405,  405,  407,  422,  407,
      407,  407,  407,  407,  407,  407,  407,  407,    0,  425,
        0,    0,    0,    0,    0,  418,  418,  405,  405,  405,
      405,  405,  405,  408,    0,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  409,  425,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  427,  409,  409,  409,
      409,  409,  409,  410,  427,  410,  410,  410,  410,  410,
      410,  410,  410,  410,    0,    0,    0,    0,    0,    0,
        0,    0,  427,  409,  409,  409,  409,  409,  409,  411,
      427,  411,  411,  411,  411,  411,  411,  411,  411,  411,

      411,  419,  411,  411,  411,  411,  411,  411,  412,  417,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  414,
      421,  419,  414,  446,  417,  420,    0,  419,  411,  411,
      411,  411,  411,  411,  423,  417,  426,  420,  424,  424,
      421,    0,  426,    0,  423,  414,  421,  419,  414,  446,
      417,  420,  423,  423,  429,  429,  430,    0,    0,  434,
      423,  428,  426,  420,  424,  424,  421,  428,  426,  428,
      423,  432,  430,  435,  428,  434,  431,  432,  423,  423,
      429,  429,  430,  431,  433,  434,  438,  428,  436,  435,
      447,  437,  438,  428,    0,  428,    0,  432,  430,  435,

      428,  434,  431,  432,  433,  440,  436,  437,  441,  431,
      433,  442,  438,  443,  436,  435,  447,  437,  438,  439,
      439,  440,  444,  448,  441,  444,  453,  442,  443,    0,
      433,  440,  436,  437,  441,  445,  451,  442,  451,  443,
      445,  449,  449,  448,    0,  439,  439,  440,  444,  448,
      441,  444,  453,  442,  443,  450,  450,  452,  452,  455,
      454,  445,  451,    0,  451,  456,  445,  449,  449,  448,
      454,  456,  457,  459,    0,  455,  458,  454,  460,  460,
      465,  450,  450,  452,  452,  455,  454,  461,  458,  461,
      457,  456,  463,  459,  463,    0,  454,  456,  457,  459,

      462,  455,  458,  454,  460,  460,  465,  462,  468,  466,
      464,  468,  490,  461,  458,  461,  457,  464,  463,  459,
      463,  466,  467,    0,  467,    0,  462,    0,    0,    0,
        0,    0,    0,  462,  468,  466,  464,  468,    0,    0,
        0,    0,    0,  464,    0,    0,  490,  466,  467,  473,
      467,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      474,    0,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  475,  490,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,    0,  475,  475,  475,  475,  475,  475,
      476,  496,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      475,  475,  475,  475,  475,  475,  477,  496,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  488,  477,
      477,  477,  477,  477,  477,  478,  511,  478,  478,  478,
      478,  478,  478,  478,  478,  478,    0,    0,  488,    0,
        0,    0,    0,    0,  488,  477,  477,  477,  477,  477,
      477,  480,  511,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  482,  488,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,    0,  482,  482,  482,  482,
      482,  482,  484,    0,  484,  484,  484,  484,  484,  484,

      484,  484,  484,    0,    0,    0,    0,    0,    0,    0,
        0,  485,  482,  482,  482,  482,  482,  482,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  485,  486,  483,
      483,  483,  483,  483,  483,  486,  487,  485,  489,    0,
      493,  494,  493,  487,    0,  495,  494,  489,  495,  491,
      492,    0,    0,  485,  486,  483,  483,  483,  483,  483,
      483,  486,  487,  492,  489,  491,  493,  494,  493,  487,
      497,  495,  494,  489,  495,  491,  492,  498,  499,  497,
      500,  500,  501,  505,  502,  508,  504,  503,  507,  492,
      507,  491,  502,  503,  499,  504,  497,  498,  501,  505,

      510,  512,  508,  498,  499,  497,  500,  500,  501,  505,
      502,  508,  504,  503,  507,  506,  507,  512,  502,  503,
      499,  504,  506,  498,  501,  505,  509,  512,  508,  509,
      513,  515,  514,  516,  510,  514,  517,  518,  519,  521,
      522,  506,  516,  512,  520,  523,  520,  529,  506,  527,
        0,  539,  509,    0,    0,  509,  513,  515,  514,  516,
      510,  514,  517,  518,  519,  521,  522,  524,  516,  525,
      520,  523,  520,  526,  528,  527,  530,  539,  532,  524,
      531,  529,  533,    0,  534,  525,  532,  528,    0,  526,
      537,  533,  537,  524,  530,  525,    0,  531,  536,  526,

      528,  534,  530,  543,  532,  524,  531,  529,  533,  535,
      534,  525,  532,  528,  536,  526,  537,  533,  537,  538,
      530,  535,  540,  531,  536,  542,  541,  534,  559,  543,
      542,  561,  569,  538,  585,  535,  585,  559,  540,  561,
      536,  541,    0,    0,    0,  538,    0,  535,  540,    0,
        0,  542,  541,    0,  559,    0,  542,  561,  569,  538,
      585,    0,  585,  559,  540,  561,    0,  541,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  548,    0,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  550,
        0,  550,  550,  550,  550,  550,  550,  550,  550,  550,

      550,    0,  550,  550,  550,  550,  550,  550,  552,    0,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  550,  550,
      550,  550,  550,  550,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  558,  583,  551,  551,  551,  551,  551,
      551,  555,  583,  555,  555,  555,  555,  555,  555,  555,
      555,  555,    0,  558,    0,    0,    0,    0,    0,  558,
      583,  551,  551,  551,  551,  551,  551,  554,  583,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  558,
      554,  554,  554,  554,  554,  554,  557,  587,  557,  557,

      557,  557,  557,  557,  557,  557,  557,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  554,  554,  554,  554,
      554,  554,  556,  587,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  560,  556,  556,  556,  556,  556,
      556,  562,  563,  565,  560,  564,  564,  568,    0,  565,
        0,  563,    0,  562,    0,    0,  570,  566,  567,  580,
      560,  556,  556,  556,  556,  556,  556,  562,  563,  565,
      560,  564,  564,  566,  567,  565,  570,  563,  575,  562,
      572,  568,  570,  566,  567,  571,  573,  572,  571,  574,
      576,  578,  573,  580,  578,  574,  582,  576,  575,  566,

      567,  588,  570,  584,  575,  577,  572,  568,  579,  579,
      581,  571,  573,  572,  571,  574,  576,  578,  573,  580,
      578,  574,  589,  576,  575,  577,  581,  588,  590,  586,
      582,  577,  586,  591,  579,  579,  581,  584,  592,  593,
      591,  592,  593,  594,  595,  596,  597,  600,  589,  598,
      599,  577,  581,  595,  590,  586,  582,  598,  586,  591,
      603,  596,  599,  584,  592,  593,  591,  592,  593,  594,
      595,  596,  604,  600,  601,  598,  599,  605,  606,  595,
      597,  601,  602,  598,  624,  602,  603,  596,  599,  607,
      622,  624,  622,    0,  606,    0,    0,    0,  604,    0,

      601,    0,    0,  605,  606,  607,  597,  601,  602,    0,
      624,  602,    0,    0,    0,  607,  622,  624,  622,  614,
      606,  614,  614,  614,  614,  614,  614,  614,  614,  614,
        0,  607,  613,    0,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  631,  613,  613,  613,  613,  613,
      613,  616,  633,  616,  616,  616,  616,  616,  616,  616,
      616,  616,    0,  635,    0,    0,    0,    0,    0,    0,
      631,  613,  613,  613,  613,  613,  613,  615,  633,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  638,
      615,  615,  615,  615,  615,  615,  617,  635,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  642,    0,
        0,    0,    0,    0,    0,  638,  615,  615,  615,  615,
      615,  615,  619,  635,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  642,  619,  619,  619,  619,  619,
      619,  621,    0,  621,  621,  621,  621,  621,  621,  621,
      621,  621,    0,    0,    0,    0,    0,    0,    0,    0,
      627,  619,  619,  619,  619,  619,  619,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  627,  629,  620,  620,
      620,  620,  620,  620,  623,  625,  627,  625,  623,  626,
      632,  626,  630,  634,  629,  634,  630,    0,    0,  632,

      628,    0,  627,  629,  620,  620,  620,  620,  620,  620,
      623,  625,  628,  625,  623,  626,  632,  626,  630,  634,
      629,  634,  630,  636,  637,  632,  628,  639,  640,  641,
      645,  643,  644,  647,  646,  648,  649,  651,  628,  647,
      636,  641,  637,  646,  640,  639,  652,  648,  650,  636,
      637,  643,  644,  639,  640,  641,  645,  643,  644,  647,
      646,  648,  649,  651,  650,  647,  636,  641,  637,  646,
      640,  639,  652,  648,  650,  653,  654,  643,  644,  655,
      656,  657,  658,  659,  660,  661,  662,  663,  663,    0,
      650,  658,  656,  678,  680,  659,  684,  664,  685,    0,

      660,  653,  654,    0,    0,  655,  656,  657,  658,  659,
      660,  661,  662,  663,  663,  664,    0,  658,  656,  678,
      680,  659,  684,  664,  685,  668,  660,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,    0,    0,    0,
        0,  664,  670,    0,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  687,  670,  670,  670,  670,  670,
      670,  672,    0,  672,  672,  672,  672,  672,  672,  672,
      672,  672,    0,    0,    0,    0,    0,    0,    0,  694,
      687,  670,  670,  670,  670,  670,  670,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  681,  681,  671,  671,

      671,  671,  671,  671,  674,  694,  674,  674,  674,  674,
      674,  674,  674,  674,  674,    0,    0,    0,    0,    0,
        0,    0,  681,  681,  671,  671,  671,  671,  671,  671,
      673,    0,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  683,  673,  673,  673,  673,  673,  673,  676,
      683,  676,  676,  676,  676,  676,  676,  676,  676,  676,
        0,    0,    0,    0,    0,    0,    0,  693,  683,  673,
      673,  673,  673,  673,  673,  675,  683,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  677,  675,  675,
      675,  675,  675,  675,  679,  682,  686,  688,  689,  688,

      679,  693,  682,  677,  690,  691,    0,  689,  692,  692,
      690,  691,  686,  677,  675,  675,  675,  675,  675,  675,
      679,  682,  686,  688,  689,  688,  679,  693,  682,  677,
      690,  691,  695,  689,  692,  692,  690,  691,  686,  695,
      696,  698,  697,  699,  700,  701,  709,  704,  707,  696,
        0,  705,  706,  706,  724,  707,  724,  698,  695,  697,
      699,  700,  704,  705,  708,  695,  696,  698,  697,  699,
      700,  701,  709,  704,  707,  696,  708,  705,  706,  706,
      724,  707,  724,  698,    0,  697,  699,  700,  704,  705,
      708,  715,    0,  715,  715,  715,  715,  715,  715,  715,

      715,  715,  708,  714,    0,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  725,  714,  714,  714,  714,
      714,  714,  717,  726,  717,  717,  717,  717,  717,  717,
      717,  717,  717,    0,  730,    0,    0,    0,    0,    0,
        0,  725,  714,  714,  714,  714,  714,  714,  716,  726,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      730,  716,  716,  716,  716,  716,  716,  718,  731,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  735,
        0,    0,    0,    0,    0,    0,    0,  716,  716,  716,
      716,  716,  716,  720,  731,  720,  720,  720,  720,  720,

      720,  720,  720,  720,  720,  735,  720,  720,  720,  720,
      720,  720,  722,    0,  722,  722,  722,  722,  722,  722,
      722,  722,  722,    0,    0,    0,    0,    0,    0,    0,
      737,  727,  720,  720,  720,  720,  720,  720,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  727,  728,  721,
      721,  721,  721,  721,  721,  723,  737,  727,  733,  723,
      734,  733,  729,  738,  728,    0,  742,  732,    0,  734,
        0,    0,  740,  727,  728,  721,  721,  721,  721,  721,
      721,  723,  729,  732,  733,  723,  734,  733,  729,  738,
      728,  736,  740,  732,  739,  734,  741,  736,  740,  736,

      742,  744,  745,  743,  746,  746,  747,  760,  729,  732,
      762,  739,  741,  764,  747,  764,  744,  736,  740,  743,
      739,    0,  741,  736,    0,  736,  742,  744,  745,  743,
      746,  746,  747,  760,  767,    0,  762,  739,  741,  764,
      747,  764,  744,    0,  751,  743,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  753,    0,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  767,  753,
      753,  753,  753,  753,  753,  755,    0,  755,  755,  755,
      755,  755,  755,  755,  755,  755,    0,    0,    0,    0,
        0,    0,    0,  768,  767,  753,  753,  753,  753,  753,

      753,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      766,  773,  754,  754,  754,  754,  754,  754,  757,  768,
      757,  757,  757,  757,  757,  757,  757,  757,  757,    0,
      766,    0,    0,    0,    0,    0,  766,  773,  754,  754,
      754,  754,  754,  754,  756,    0,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  766,  756,  756,  756,
      756,  756,  756,  759,  806,  759,  759,  759,  759,  759,
      759,  759,  759,  759,    0,  761,    0,    0,    0,    0,
        0,    0,  761,  756,  756,  756,  756,  756,  756,  758,
      806,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  761,  758,  758,  758,  758,  758,  758,  761,  763,
      769,  770,  763,  771,  774,  772,  771,  772,  775,  775,
      774,    0,    0,  777,  770,  777,    0,  769,  758,  758,
      758,  758,  758,  758,    0,  763,  769,  770,  763,  771,
      774,  772,  771,  772,  775,  775,  774,  776,  778,  777,
      770,  777,  784,  769,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  776,  778,    0,  807,    0,    0,  793,
        0,    0,    0,  776,  778,  786,    0,  786,  786,  786,
      786,  786,  786,  786,  786,  786,    0,    0,    0,  776,
      778,  783,  807,  783,  783,  783,  783,  783,  783,  783,

      783,  783,  783,  793,  783,  783,  783,  783,  783,  783,
      787,  824,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  799,    0,    0,    0,    0,    0,    0,  793,
      783,  783,  783,  783,  783,  783,  785,  824,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  799,  785,
      785,  785,  785,  785,  785,  791,  825,  791,  791,  791,
      791,  791,  791,  791,  791,  791,    0,    0,    0,    0,
        0,    0,    0,    0,  799,  785,  785,  785,  785,  785,
      785,  789,  825,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  792,  789,  789,  789,  789,  789,  789,

        0,    0,    0,    0,    0,    0,    0,    0,  816,  792,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  792,
      789,  789,  789,  789,  789,  789,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  792,  795,  790,  790,  790,
      790,  790,  790,  794,  796,  801,  797,  794,  797,    0,
      823,    0,  795,    0,  803,    0,  800,  803,    0,  798,
      796,  801,  795,  790,  790,  790,  790,  790,  790,  794,
      796,  801,  797,  794,  797,  798,  800,  798,  795,  802,
      803,  804,  800,  803,  823,  798,  796,  801,  805,  805,
      826,  830,  833,  804,    0,  802,    0,    0,    0,    0,

        0,  798,  800,  798,    0,  802,    0,  804,    0,    0,
      823,    0,    0,    0,  805,  805,  826,  830,  833,  804,
      812,  802,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  814,    0,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  854,  814,  814,  814,  814,  814,
      814,  818,    0,  818,  818,  818,  818,  818,  818,  818,
      818,  818,    0,    0,    0,    0,    0,    0,    0,  834,
      854,  814,  814,  814,  814,  814,  814,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  834,  855,  815,  815,
      815,  815,  815,  815,  820,  834,  820,  820,  820,  820,

      820,  820,  820,  820,  820,    0,  822,    0,    0,    0,
        0,    0,  834,  855,  815,  815,  815,  815,  815,  815,
      817,  822,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  822,  817,  817,  817,  817,  817,  817,    0,
      856,    0,    0,    0,    0,    0,  843,  822,  843,  843,
      843,  843,  843,  843,  843,  843,  843,    0,    0,  817,
      817,  817,  817,  817,  817,  819,  856,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  827,  819,  819,
      819,  819,  819,  819,  821,  828,  829,  821,  831,  831,
      831,  829,  831,  827,  828,  832,  860,  832,  859,  860,

        0,    0,    0,  827,  819,  819,  819,  819,  819,  819,
      821,  828,  829,  821,  835,  836,  879,  829,  831,  827,
      828,  832,  835,  832,  859,  860,  845,  836,  845,  845,
      845,  845,  845,  845,  845,  845,  845,    0,    0,    0,
      835,  836,  879,  861,  831,    0,    0,    0,  835,    0,
        0,  860,    0,  836,  842,  862,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  861,  842,  842,  842,
      842,  842,  842,  846,  884,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  862,    0,    0,    0,    0,
        0,    0,  861,  842,  842,  842,  842,  842,  842,  844,

      884,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      857,  862,  844,  844,  844,  844,  844,  844,  850,  885,
      850,  850,  850,  850,  850,  850,  850,  850,  850,    0,
      857,    0,    0,    0,    0,    0,  857,    0,  844,  844,
      844,  844,  844,  844,  848,  885,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  857,  848,  848,  848,
      848,  848,  848,  851,  852,    0,  858,  851,  852,  863,
        0,  863,    0,    0,  891,    0,  886,    0,  886,  853,
      864,  892,  858,  848,  848,  848,  848,  848,  848,  851,
      852,  853,  858,  851,  852,  863,  864,  863,  853,  853,

      865,  866,  886,  891,  886,  853,  864,  892,  858,  866,
      894,  880,  888,  889,  910,    0,  865,  853,    0,    0,
        0,    0,  864,    0,  853,  853,  865,  866,  880,  891,
        0,    0,    0,    0,    0,  866,  894,  880,  889,  888,
      910,  872,  865,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  874,  880,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  889,  888,  874,  874,  874,  874,
      874,  874,  875,  914,  875,  875,  875,  875,  875,  875,
      875,  875,  875,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  874,  874,  874,  874,  874,  874,  876,  914,

      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      881,  876,  876,  876,  876,  876,  876,  877,  890,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  881,  882,
      887,  893,  915,  916,  893,  895,  881,  876,  876,  876,
      876,  876,  876,  917,  883,  890,  905,  908,  887,  882,
      883,  895,  908,  905,  881,  882,  887,  893,  915,  916,
      893,  895,  883,    0,  918,    0,    0,    0,    0,  917,
      883,  890,  905,  908,  887,  882,  883,  895,  908,  905,
        0,    0,    0,  906,    0,    0,    0,    0,  883,  900,
      918,  900,  900,  900,  900,  900,  900,  900,  900,  900,

      919,  906,  900,  900,  900,  900,  900,  900,  901,  906,
      901,  901,  901,  901,  901,  901,  901,  901,  901,    0,
      907,    0,  912,  907,  912,  927,  919,  906,  900,  900,
      900,  900,  900,  900,  902,  929,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  907,  909,  912,  907,
      912,  927,  928,  913,  913,  909,  913,  913,  913,  913,
      913,  913,  930,    0,  913,  945,    0,  946,  928,  929,
        0,  933,  933,  909,  913,  913,  931,    0,  928,    0,
      924,  909,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  945,  931,  946,  928,  929,  930,  933,  933,    0,

      935,  935,  931,  934,  934,  941,  934,  934,  934,  934,
      934,  934,  948,  943,  934,  940,  942,  935,  931,  943,
      940,  942,  930,  941,  934,  934,  935,  935,  944,  944,
      949,  941,  948,  947,  947,  954,  954,  949,  948,  943,
      957,  940,  942,  935,    0,  943,  940,  942,  958,  941,
      947,  955,  959,  960,  944,  944,  949,  955,  948,  947,
      947,  954,  954,  949,  956,  962,  957,  965,  963,  969,
      956,  964,  964,  970,  958,  963,  947,  955,  959,  960,
      970,  971,  973,  955,  971,  962,  972,  972,  975,  977,
      956,  962,  985,  965,  963,  969,  956,  964,  964,  970,

      978,  963,  976,  976,  984,  984,  970,  971,  973,  983,
      971,  962,  972,  972,  975,  977,  983,  986,  985,  988,
      978,  989,  993,  994,  993,  996,  978, 1001,  976,  976,
      984,  984,    0,    0,    0,  983,    0,    0,    0,  988,
        0,    0,  983,  986,    0,  988,  978,  989,  993,  994,
      993,  996,    0, 1001,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  988, 1012, 1012, 1012, 1012,
     1013, 1013, 1013, 1013, 1014, 1014, 1014, 1014, 1015,    0,
     1015, 1015, 1016, 1016, 1016, 1016, 1017,    0, 1017, 1017,
     1018, 1018, 1020, 1020, 1021, 1021, 1022, 1022, 1023, 1023,

     1024, 1024, 1025, 1025, 1026, 1026, 1027, 1027, 1028, 1028,
     1029, 1029, 1030,    0, 1030, 1030, 1031, 1031, 1032, 1032,
     1033, 1033, 1034, 1034, 1035, 1035, 1036, 1036, 1037, 1037,
     1038, 1038, 1039, 1039, 1040, 1040, 1041, 1041, 1042, 1042,
     1043, 1043, 1044, 1044, 1045, 1045, 1046, 1046, 1047, 1047,
     1048, 1048, 1049, 1049, 1050, 1050, 1051, 1051, 1052, 1052,
     1053, 1053, 1054, 1054, 1055, 1055, 1056, 1056, 1058, 1058,
     1059, 1059, 1060, 1060, 1062, 1062, 1063, 1063, 1064, 1064,
     1067, 1067, 1068, 1068, 1069, 1069, 1071,    0, 1071, 1071,
     1072,    0, 1072, 1072, 1073, 1073, 1074, 1074, 1077,    0,

     1077, 1077, 1078,    0, 1078, 1078, 1079, 1079, 1080, 1080,
     1081, 1081, 1082, 1082, 1083, 1083, 1085, 1085, 1086, 1086,
     1087, 1087, 1088, 1088, 1089, 1089, 1091, 1091, 1092, 1092,
     1093, 1093, 1095, 1095, 1097, 1097, 1098, 1098, 1099, 1099,
     1101, 1101, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[124] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2120 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2225 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1012 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5843 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::LOGFEATURE_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::FEATURE_EXPR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 178 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 179 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 109:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 195 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 213 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 222 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 231 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 240 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 252 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 259 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 280 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 312 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 340 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 350 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 359 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 362 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3094 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1012 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1012 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1011);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 362 "SrvLexer.l"



